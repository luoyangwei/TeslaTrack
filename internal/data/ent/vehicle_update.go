// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"teslatrack/internal/data/ent/predicate"
	"teslatrack/internal/data/ent/vehicle"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VehicleUpdate is the builder for updating Vehicle entities.
type VehicleUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleMutation
}

// Where appends a list predicates to the VehicleUpdate builder.
func (_u *VehicleUpdate) Where(ps ...predicate.Vehicle) *VehicleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetVin sets the "vin" field.
func (_u *VehicleUpdate) SetVin(v string) *VehicleUpdate {
	_u.mutation.SetVin(v)
	return _u
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableVin(v *string) *VehicleUpdate {
	if v != nil {
		_u.SetVin(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *VehicleUpdate) SetUserID(v int) *VehicleUpdate {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableUserID(v *int) *VehicleUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *VehicleUpdate) AddUserID(v int) *VehicleUpdate {
	_u.mutation.AddUserID(v)
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *VehicleUpdate) SetDisplayName(v string) *VehicleUpdate {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableDisplayName(v *string) *VehicleUpdate {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// SetAccessType sets the "access_type" field.
func (_u *VehicleUpdate) SetAccessType(v string) *VehicleUpdate {
	_u.mutation.SetAccessType(v)
	return _u
}

// SetNillableAccessType sets the "access_type" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableAccessType(v *string) *VehicleUpdate {
	if v != nil {
		_u.SetAccessType(*v)
	}
	return _u
}

// SetState sets the "state" field.
func (_u *VehicleUpdate) SetState(v int8) *VehicleUpdate {
	_u.mutation.ResetState()
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableState(v *int8) *VehicleUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// AddState adds value to the "state" field.
func (_u *VehicleUpdate) AddState(v int8) *VehicleUpdate {
	_u.mutation.AddState(v)
	return _u
}

// SetInService sets the "in_service" field.
func (_u *VehicleUpdate) SetInService(v int8) *VehicleUpdate {
	_u.mutation.ResetInService()
	_u.mutation.SetInService(v)
	return _u
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableInService(v *int8) *VehicleUpdate {
	if v != nil {
		_u.SetInService(*v)
	}
	return _u
}

// AddInService adds value to the "in_service" field.
func (_u *VehicleUpdate) AddInService(v int8) *VehicleUpdate {
	_u.mutation.AddInService(v)
	return _u
}

// SetCalendarEnabled sets the "calendar_enabled" field.
func (_u *VehicleUpdate) SetCalendarEnabled(v int8) *VehicleUpdate {
	_u.mutation.ResetCalendarEnabled()
	_u.mutation.SetCalendarEnabled(v)
	return _u
}

// SetNillableCalendarEnabled sets the "calendar_enabled" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableCalendarEnabled(v *int8) *VehicleUpdate {
	if v != nil {
		_u.SetCalendarEnabled(*v)
	}
	return _u
}

// AddCalendarEnabled adds value to the "calendar_enabled" field.
func (_u *VehicleUpdate) AddCalendarEnabled(v int8) *VehicleUpdate {
	_u.mutation.AddCalendarEnabled(v)
	return _u
}

// SetCarType sets the "car_type" field.
func (_u *VehicleUpdate) SetCarType(v string) *VehicleUpdate {
	_u.mutation.SetCarType(v)
	return _u
}

// SetNillableCarType sets the "car_type" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableCarType(v *string) *VehicleUpdate {
	if v != nil {
		_u.SetCarType(*v)
	}
	return _u
}

// ClearCarType clears the value of the "car_type" field.
func (_u *VehicleUpdate) ClearCarType() *VehicleUpdate {
	_u.mutation.ClearCarType()
	return _u
}

// SetAPIVersion sets the "api_version" field.
func (_u *VehicleUpdate) SetAPIVersion(v string) *VehicleUpdate {
	_u.mutation.SetAPIVersion(v)
	return _u
}

// SetNillableAPIVersion sets the "api_version" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableAPIVersion(v *string) *VehicleUpdate {
	if v != nil {
		_u.SetAPIVersion(*v)
	}
	return _u
}

// ClearAPIVersion clears the value of the "api_version" field.
func (_u *VehicleUpdate) ClearAPIVersion() *VehicleUpdate {
	_u.mutation.ClearAPIVersion()
	return _u
}

// SetRawData sets the "raw_data" field.
func (_u *VehicleUpdate) SetRawData(v string) *VehicleUpdate {
	_u.mutation.SetRawData(v)
	return _u
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableRawData(v *string) *VehicleUpdate {
	if v != nil {
		_u.SetRawData(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VehicleUpdate) SetUpdatedAt(v time.Time) *VehicleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *VehicleUpdate) SetDeleted(v bool) *VehicleUpdate {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *VehicleUpdate) SetNillableDeleted(v *bool) *VehicleUpdate {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// Mutation returns the VehicleMutation object of the builder.
func (_u *VehicleUpdate) Mutation() *VehicleMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *VehicleUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VehicleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *VehicleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VehicleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VehicleUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := vehicle.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VehicleUpdate) check() error {
	if v, ok := _u.mutation.Vin(); ok {
		if err := vehicle.VinValidator(v); err != nil {
			return &ValidationError{Name: "vin", err: fmt.Errorf(`ent: validator failed for field "Vehicle.vin": %w`, err)}
		}
	}
	return nil
}

func (_u *VehicleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehicle.Table, vehicle.Columns, sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Vin(); ok {
		_spec.SetField(vehicle.FieldVin, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(vehicle.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(vehicle.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(vehicle.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := _u.mutation.AccessType(); ok {
		_spec.SetField(vehicle.FieldAccessType, field.TypeString, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(vehicle.FieldState, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedState(); ok {
		_spec.AddField(vehicle.FieldState, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.InService(); ok {
		_spec.SetField(vehicle.FieldInService, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedInService(); ok {
		_spec.AddField(vehicle.FieldInService, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.CalendarEnabled(); ok {
		_spec.SetField(vehicle.FieldCalendarEnabled, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedCalendarEnabled(); ok {
		_spec.AddField(vehicle.FieldCalendarEnabled, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.CarType(); ok {
		_spec.SetField(vehicle.FieldCarType, field.TypeString, value)
	}
	if _u.mutation.CarTypeCleared() {
		_spec.ClearField(vehicle.FieldCarType, field.TypeString)
	}
	if value, ok := _u.mutation.APIVersion(); ok {
		_spec.SetField(vehicle.FieldAPIVersion, field.TypeString, value)
	}
	if _u.mutation.APIVersionCleared() {
		_spec.ClearField(vehicle.FieldAPIVersion, field.TypeString)
	}
	if value, ok := _u.mutation.RawData(); ok {
		_spec.SetField(vehicle.FieldRawData, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicle.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(vehicle.FieldDeleted, field.TypeBool, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// VehicleUpdateOne is the builder for updating a single Vehicle entity.
type VehicleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleMutation
}

// SetVin sets the "vin" field.
func (_u *VehicleUpdateOne) SetVin(v string) *VehicleUpdateOne {
	_u.mutation.SetVin(v)
	return _u
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableVin(v *string) *VehicleUpdateOne {
	if v != nil {
		_u.SetVin(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *VehicleUpdateOne) SetUserID(v int) *VehicleUpdateOne {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableUserID(v *int) *VehicleUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *VehicleUpdateOne) AddUserID(v int) *VehicleUpdateOne {
	_u.mutation.AddUserID(v)
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *VehicleUpdateOne) SetDisplayName(v string) *VehicleUpdateOne {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableDisplayName(v *string) *VehicleUpdateOne {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// SetAccessType sets the "access_type" field.
func (_u *VehicleUpdateOne) SetAccessType(v string) *VehicleUpdateOne {
	_u.mutation.SetAccessType(v)
	return _u
}

// SetNillableAccessType sets the "access_type" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableAccessType(v *string) *VehicleUpdateOne {
	if v != nil {
		_u.SetAccessType(*v)
	}
	return _u
}

// SetState sets the "state" field.
func (_u *VehicleUpdateOne) SetState(v int8) *VehicleUpdateOne {
	_u.mutation.ResetState()
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableState(v *int8) *VehicleUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// AddState adds value to the "state" field.
func (_u *VehicleUpdateOne) AddState(v int8) *VehicleUpdateOne {
	_u.mutation.AddState(v)
	return _u
}

// SetInService sets the "in_service" field.
func (_u *VehicleUpdateOne) SetInService(v int8) *VehicleUpdateOne {
	_u.mutation.ResetInService()
	_u.mutation.SetInService(v)
	return _u
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableInService(v *int8) *VehicleUpdateOne {
	if v != nil {
		_u.SetInService(*v)
	}
	return _u
}

// AddInService adds value to the "in_service" field.
func (_u *VehicleUpdateOne) AddInService(v int8) *VehicleUpdateOne {
	_u.mutation.AddInService(v)
	return _u
}

// SetCalendarEnabled sets the "calendar_enabled" field.
func (_u *VehicleUpdateOne) SetCalendarEnabled(v int8) *VehicleUpdateOne {
	_u.mutation.ResetCalendarEnabled()
	_u.mutation.SetCalendarEnabled(v)
	return _u
}

// SetNillableCalendarEnabled sets the "calendar_enabled" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableCalendarEnabled(v *int8) *VehicleUpdateOne {
	if v != nil {
		_u.SetCalendarEnabled(*v)
	}
	return _u
}

// AddCalendarEnabled adds value to the "calendar_enabled" field.
func (_u *VehicleUpdateOne) AddCalendarEnabled(v int8) *VehicleUpdateOne {
	_u.mutation.AddCalendarEnabled(v)
	return _u
}

// SetCarType sets the "car_type" field.
func (_u *VehicleUpdateOne) SetCarType(v string) *VehicleUpdateOne {
	_u.mutation.SetCarType(v)
	return _u
}

// SetNillableCarType sets the "car_type" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableCarType(v *string) *VehicleUpdateOne {
	if v != nil {
		_u.SetCarType(*v)
	}
	return _u
}

// ClearCarType clears the value of the "car_type" field.
func (_u *VehicleUpdateOne) ClearCarType() *VehicleUpdateOne {
	_u.mutation.ClearCarType()
	return _u
}

// SetAPIVersion sets the "api_version" field.
func (_u *VehicleUpdateOne) SetAPIVersion(v string) *VehicleUpdateOne {
	_u.mutation.SetAPIVersion(v)
	return _u
}

// SetNillableAPIVersion sets the "api_version" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableAPIVersion(v *string) *VehicleUpdateOne {
	if v != nil {
		_u.SetAPIVersion(*v)
	}
	return _u
}

// ClearAPIVersion clears the value of the "api_version" field.
func (_u *VehicleUpdateOne) ClearAPIVersion() *VehicleUpdateOne {
	_u.mutation.ClearAPIVersion()
	return _u
}

// SetRawData sets the "raw_data" field.
func (_u *VehicleUpdateOne) SetRawData(v string) *VehicleUpdateOne {
	_u.mutation.SetRawData(v)
	return _u
}

// SetNillableRawData sets the "raw_data" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableRawData(v *string) *VehicleUpdateOne {
	if v != nil {
		_u.SetRawData(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VehicleUpdateOne) SetUpdatedAt(v time.Time) *VehicleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *VehicleUpdateOne) SetDeleted(v bool) *VehicleUpdateOne {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *VehicleUpdateOne) SetNillableDeleted(v *bool) *VehicleUpdateOne {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// Mutation returns the VehicleMutation object of the builder.
func (_u *VehicleUpdateOne) Mutation() *VehicleMutation {
	return _u.mutation
}

// Where appends a list predicates to the VehicleUpdate builder.
func (_u *VehicleUpdateOne) Where(ps ...predicate.Vehicle) *VehicleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *VehicleUpdateOne) Select(field string, fields ...string) *VehicleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Vehicle entity.
func (_u *VehicleUpdateOne) Save(ctx context.Context) (*Vehicle, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VehicleUpdateOne) SaveX(ctx context.Context) *Vehicle {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *VehicleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VehicleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VehicleUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := vehicle.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VehicleUpdateOne) check() error {
	if v, ok := _u.mutation.Vin(); ok {
		if err := vehicle.VinValidator(v); err != nil {
			return &ValidationError{Name: "vin", err: fmt.Errorf(`ent: validator failed for field "Vehicle.vin": %w`, err)}
		}
	}
	return nil
}

func (_u *VehicleUpdateOne) sqlSave(ctx context.Context) (_node *Vehicle, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehicle.Table, vehicle.Columns, sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vehicle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicle.FieldID)
		for _, f := range fields {
			if !vehicle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Vin(); ok {
		_spec.SetField(vehicle.FieldVin, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(vehicle.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(vehicle.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(vehicle.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := _u.mutation.AccessType(); ok {
		_spec.SetField(vehicle.FieldAccessType, field.TypeString, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(vehicle.FieldState, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedState(); ok {
		_spec.AddField(vehicle.FieldState, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.InService(); ok {
		_spec.SetField(vehicle.FieldInService, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedInService(); ok {
		_spec.AddField(vehicle.FieldInService, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.CalendarEnabled(); ok {
		_spec.SetField(vehicle.FieldCalendarEnabled, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedCalendarEnabled(); ok {
		_spec.AddField(vehicle.FieldCalendarEnabled, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.CarType(); ok {
		_spec.SetField(vehicle.FieldCarType, field.TypeString, value)
	}
	if _u.mutation.CarTypeCleared() {
		_spec.ClearField(vehicle.FieldCarType, field.TypeString)
	}
	if value, ok := _u.mutation.APIVersion(); ok {
		_spec.SetField(vehicle.FieldAPIVersion, field.TypeString, value)
	}
	if _u.mutation.APIVersionCleared() {
		_spec.ClearField(vehicle.FieldAPIVersion, field.TypeString)
	}
	if value, ok := _u.mutation.RawData(); ok {
		_spec.SetField(vehicle.FieldRawData, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicle.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(vehicle.FieldDeleted, field.TypeBool, value)
	}
	_node = &Vehicle{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
