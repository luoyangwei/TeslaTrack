// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"teslatrack/internal/data/ent/predicate"
	"teslatrack/internal/data/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAccount sets the "account" field.
func (_u *UserUpdate) SetAccount(v string) *UserUpdate {
	_u.mutation.SetAccount(v)
	return _u
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAccount(v *string) *UserUpdate {
	if v != nil {
		_u.SetAccount(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdate) SetPassword(v string) *UserUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePassword(v *string) *UserUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetMobile sets the "mobile" field.
func (_u *UserUpdate) SetMobile(v string) *UserUpdate {
	_u.mutation.SetMobile(v)
	return _u
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_u *UserUpdate) SetNillableMobile(v *string) *UserUpdate {
	if v != nil {
		_u.SetMobile(*v)
	}
	return _u
}

// ClearMobile clears the value of the "mobile" field.
func (_u *UserUpdate) ClearMobile() *UserUpdate {
	_u.mutation.ClearMobile()
	return _u
}

// SetOpenID sets the "open_id" field.
func (_u *UserUpdate) SetOpenID(v string) *UserUpdate {
	_u.mutation.SetOpenID(v)
	return _u
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillableOpenID(v *string) *UserUpdate {
	if v != nil {
		_u.SetOpenID(*v)
	}
	return _u
}

// ClearOpenID clears the value of the "open_id" field.
func (_u *UserUpdate) ClearOpenID() *UserUpdate {
	_u.mutation.ClearOpenID()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *UserUpdate) SetAvatar(v string) *UserUpdate {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAvatar(v *string) *UserUpdate {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *UserUpdate) ClearAvatar() *UserUpdate {
	_u.mutation.ClearAvatar()
	return _u
}

// SetNickName sets the "nick_name" field.
func (_u *UserUpdate) SetNickName(v string) *UserUpdate {
	_u.mutation.SetNickName(v)
	return _u
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableNickName(v *string) *UserUpdate {
	if v != nil {
		_u.SetNickName(*v)
	}
	return _u
}

// ClearNickName clears the value of the "nick_name" field.
func (_u *UserUpdate) ClearNickName() *UserUpdate {
	_u.mutation.ClearNickName()
	return _u
}

// SetIntroduction sets the "introduction" field.
func (_u *UserUpdate) SetIntroduction(v string) *UserUpdate {
	_u.mutation.SetIntroduction(v)
	return _u
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (_u *UserUpdate) SetNillableIntroduction(v *string) *UserUpdate {
	if v != nil {
		_u.SetIntroduction(*v)
	}
	return _u
}

// ClearIntroduction clears the value of the "introduction" field.
func (_u *UserUpdate) ClearIntroduction() *UserUpdate {
	_u.mutation.ClearIntroduction()
	return _u
}

// SetGender sets the "gender" field.
func (_u *UserUpdate) SetGender(v int8) *UserUpdate {
	_u.mutation.ResetGender()
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *UserUpdate) SetNillableGender(v *int8) *UserUpdate {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// AddGender adds value to the "gender" field.
func (_u *UserUpdate) AddGender(v int8) *UserUpdate {
	_u.mutation.AddGender(v)
	return _u
}

// SetAskedUserID sets the "asked_user_id" field.
func (_u *UserUpdate) SetAskedUserID(v int) *UserUpdate {
	_u.mutation.ResetAskedUserID()
	_u.mutation.SetAskedUserID(v)
	return _u
}

// SetNillableAskedUserID sets the "asked_user_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAskedUserID(v *int) *UserUpdate {
	if v != nil {
		_u.SetAskedUserID(*v)
	}
	return _u
}

// AddAskedUserID adds value to the "asked_user_id" field.
func (_u *UserUpdate) AddAskedUserID(v int) *UserUpdate {
	_u.mutation.AddAskedUserID(v)
	return _u
}

// ClearAskedUserID clears the value of the "asked_user_id" field.
func (_u *UserUpdate) ClearAskedUserID() *UserUpdate {
	_u.mutation.ClearAskedUserID()
	return _u
}

// SetAreaCode sets the "area_code" field.
func (_u *UserUpdate) SetAreaCode(v string) *UserUpdate {
	_u.mutation.SetAreaCode(v)
	return _u
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAreaCode(v *string) *UserUpdate {
	if v != nil {
		_u.SetAreaCode(*v)
	}
	return _u
}

// ClearAreaCode clears the value of the "area_code" field.
func (_u *UserUpdate) ClearAreaCode() *UserUpdate {
	_u.mutation.ClearAreaCode()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *UserUpdate) SetDeleted(v bool) *UserUpdate {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDeleted(v *bool) *UserUpdate {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Account(); ok {
		_spec.SetField(user.FieldAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if _u.mutation.MobileCleared() {
		_spec.ClearField(user.FieldMobile, field.TypeString)
	}
	if value, ok := _u.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
	}
	if _u.mutation.OpenIDCleared() {
		_spec.ClearField(user.FieldOpenID, field.TypeString)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.NickName(); ok {
		_spec.SetField(user.FieldNickName, field.TypeString, value)
	}
	if _u.mutation.NickNameCleared() {
		_spec.ClearField(user.FieldNickName, field.TypeString)
	}
	if value, ok := _u.mutation.Introduction(); ok {
		_spec.SetField(user.FieldIntroduction, field.TypeString, value)
	}
	if _u.mutation.IntroductionCleared() {
		_spec.ClearField(user.FieldIntroduction, field.TypeString)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AskedUserID(); ok {
		_spec.SetField(user.FieldAskedUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAskedUserID(); ok {
		_spec.AddField(user.FieldAskedUserID, field.TypeInt, value)
	}
	if _u.mutation.AskedUserIDCleared() {
		_spec.ClearField(user.FieldAskedUserID, field.TypeInt)
	}
	if value, ok := _u.mutation.AreaCode(); ok {
		_spec.SetField(user.FieldAreaCode, field.TypeString, value)
	}
	if _u.mutation.AreaCodeCleared() {
		_spec.ClearField(user.FieldAreaCode, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(user.FieldDeleted, field.TypeBool, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetAccount sets the "account" field.
func (_u *UserUpdateOne) SetAccount(v string) *UserUpdateOne {
	_u.mutation.SetAccount(v)
	return _u
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAccount(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAccount(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdateOne) SetPassword(v string) *UserUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePassword(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetMobile sets the "mobile" field.
func (_u *UserUpdateOne) SetMobile(v string) *UserUpdateOne {
	_u.mutation.SetMobile(v)
	return _u
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableMobile(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetMobile(*v)
	}
	return _u
}

// ClearMobile clears the value of the "mobile" field.
func (_u *UserUpdateOne) ClearMobile() *UserUpdateOne {
	_u.mutation.ClearMobile()
	return _u
}

// SetOpenID sets the "open_id" field.
func (_u *UserUpdateOne) SetOpenID(v string) *UserUpdateOne {
	_u.mutation.SetOpenID(v)
	return _u
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableOpenID(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetOpenID(*v)
	}
	return _u
}

// ClearOpenID clears the value of the "open_id" field.
func (_u *UserUpdateOne) ClearOpenID() *UserUpdateOne {
	_u.mutation.ClearOpenID()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *UserUpdateOne) SetAvatar(v string) *UserUpdateOne {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAvatar(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	_u.mutation.ClearAvatar()
	return _u
}

// SetNickName sets the "nick_name" field.
func (_u *UserUpdateOne) SetNickName(v string) *UserUpdateOne {
	_u.mutation.SetNickName(v)
	return _u
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableNickName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetNickName(*v)
	}
	return _u
}

// ClearNickName clears the value of the "nick_name" field.
func (_u *UserUpdateOne) ClearNickName() *UserUpdateOne {
	_u.mutation.ClearNickName()
	return _u
}

// SetIntroduction sets the "introduction" field.
func (_u *UserUpdateOne) SetIntroduction(v string) *UserUpdateOne {
	_u.mutation.SetIntroduction(v)
	return _u
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableIntroduction(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetIntroduction(*v)
	}
	return _u
}

// ClearIntroduction clears the value of the "introduction" field.
func (_u *UserUpdateOne) ClearIntroduction() *UserUpdateOne {
	_u.mutation.ClearIntroduction()
	return _u
}

// SetGender sets the "gender" field.
func (_u *UserUpdateOne) SetGender(v int8) *UserUpdateOne {
	_u.mutation.ResetGender()
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableGender(v *int8) *UserUpdateOne {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// AddGender adds value to the "gender" field.
func (_u *UserUpdateOne) AddGender(v int8) *UserUpdateOne {
	_u.mutation.AddGender(v)
	return _u
}

// SetAskedUserID sets the "asked_user_id" field.
func (_u *UserUpdateOne) SetAskedUserID(v int) *UserUpdateOne {
	_u.mutation.ResetAskedUserID()
	_u.mutation.SetAskedUserID(v)
	return _u
}

// SetNillableAskedUserID sets the "asked_user_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAskedUserID(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetAskedUserID(*v)
	}
	return _u
}

// AddAskedUserID adds value to the "asked_user_id" field.
func (_u *UserUpdateOne) AddAskedUserID(v int) *UserUpdateOne {
	_u.mutation.AddAskedUserID(v)
	return _u
}

// ClearAskedUserID clears the value of the "asked_user_id" field.
func (_u *UserUpdateOne) ClearAskedUserID() *UserUpdateOne {
	_u.mutation.ClearAskedUserID()
	return _u
}

// SetAreaCode sets the "area_code" field.
func (_u *UserUpdateOne) SetAreaCode(v string) *UserUpdateOne {
	_u.mutation.SetAreaCode(v)
	return _u
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAreaCode(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAreaCode(*v)
	}
	return _u
}

// ClearAreaCode clears the value of the "area_code" field.
func (_u *UserUpdateOne) ClearAreaCode() *UserUpdateOne {
	_u.mutation.ClearAreaCode()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *UserUpdateOne) SetDeleted(v bool) *UserUpdateOne {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDeleted(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Account(); ok {
		_spec.SetField(user.FieldAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if _u.mutation.MobileCleared() {
		_spec.ClearField(user.FieldMobile, field.TypeString)
	}
	if value, ok := _u.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
	}
	if _u.mutation.OpenIDCleared() {
		_spec.ClearField(user.FieldOpenID, field.TypeString)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.NickName(); ok {
		_spec.SetField(user.FieldNickName, field.TypeString, value)
	}
	if _u.mutation.NickNameCleared() {
		_spec.ClearField(user.FieldNickName, field.TypeString)
	}
	if value, ok := _u.mutation.Introduction(); ok {
		_spec.SetField(user.FieldIntroduction, field.TypeString, value)
	}
	if _u.mutation.IntroductionCleared() {
		_spec.ClearField(user.FieldIntroduction, field.TypeString)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AskedUserID(); ok {
		_spec.SetField(user.FieldAskedUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAskedUserID(); ok {
		_spec.AddField(user.FieldAskedUserID, field.TypeInt, value)
	}
	if _u.mutation.AskedUserIDCleared() {
		_spec.ClearField(user.FieldAskedUserID, field.TypeInt)
	}
	if value, ok := _u.mutation.AreaCode(); ok {
		_spec.SetField(user.FieldAreaCode, field.TypeString, value)
	}
	if _u.mutation.AreaCodeCleared() {
		_spec.ClearField(user.FieldAreaCode, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(user.FieldDeleted, field.TypeBool, value)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
