// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"teslatrack/internal/data/ent/authorizetoken"
	"teslatrack/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthorizeTokenUpdate is the builder for updating AuthorizeToken entities.
type AuthorizeTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AuthorizeTokenMutation
}

// Where appends a list predicates to the AuthorizeTokenUpdate builder.
func (_u *AuthorizeTokenUpdate) Where(ps ...predicate.AuthorizeToken) *AuthorizeTokenUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTeslaCode sets the "tesla_code" field.
func (_u *AuthorizeTokenUpdate) SetTeslaCode(v string) *AuthorizeTokenUpdate {
	_u.mutation.SetTeslaCode(v)
	return _u
}

// SetNillableTeslaCode sets the "tesla_code" field if the given value is not nil.
func (_u *AuthorizeTokenUpdate) SetNillableTeslaCode(v *string) *AuthorizeTokenUpdate {
	if v != nil {
		_u.SetTeslaCode(*v)
	}
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *AuthorizeTokenUpdate) SetClientID(v string) *AuthorizeTokenUpdate {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *AuthorizeTokenUpdate) SetNillableClientID(v *string) *AuthorizeTokenUpdate {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// SetClientSecret sets the "client_secret" field.
func (_u *AuthorizeTokenUpdate) SetClientSecret(v string) *AuthorizeTokenUpdate {
	_u.mutation.SetClientSecret(v)
	return _u
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (_u *AuthorizeTokenUpdate) SetNillableClientSecret(v *string) *AuthorizeTokenUpdate {
	if v != nil {
		_u.SetClientSecret(*v)
	}
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *AuthorizeTokenUpdate) SetAccessToken(v string) *AuthorizeTokenUpdate {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *AuthorizeTokenUpdate) SetNillableAccessToken(v *string) *AuthorizeTokenUpdate {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *AuthorizeTokenUpdate) SetRefreshToken(v string) *AuthorizeTokenUpdate {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *AuthorizeTokenUpdate) SetNillableRefreshToken(v *string) *AuthorizeTokenUpdate {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// SetScope sets the "scope" field.
func (_u *AuthorizeTokenUpdate) SetScope(v string) *AuthorizeTokenUpdate {
	_u.mutation.SetScope(v)
	return _u
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (_u *AuthorizeTokenUpdate) SetNillableScope(v *string) *AuthorizeTokenUpdate {
	if v != nil {
		_u.SetScope(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *AuthorizeTokenUpdate) SetCreatedAt(v time.Time) *AuthorizeTokenUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *AuthorizeTokenUpdate) SetNillableCreatedAt(v *time.Time) *AuthorizeTokenUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AuthorizeTokenUpdate) SetUpdatedAt(v time.Time) *AuthorizeTokenUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *AuthorizeTokenUpdate) SetNillableUpdatedAt(v *time.Time) *AuthorizeTokenUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *AuthorizeTokenUpdate) SetDeleted(v bool) *AuthorizeTokenUpdate {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *AuthorizeTokenUpdate) SetNillableDeleted(v *bool) *AuthorizeTokenUpdate {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// Mutation returns the AuthorizeTokenMutation object of the builder.
func (_u *AuthorizeTokenUpdate) Mutation() *AuthorizeTokenMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AuthorizeTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuthorizeTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AuthorizeTokenUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuthorizeTokenUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AuthorizeTokenUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authorizetoken.Table, authorizetoken.Columns, sqlgraph.NewFieldSpec(authorizetoken.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.TeslaCode(); ok {
		_spec.SetField(authorizetoken.FieldTeslaCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(authorizetoken.FieldClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClientSecret(); ok {
		_spec.SetField(authorizetoken.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(authorizetoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(authorizetoken.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(authorizetoken.FieldScope, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(authorizetoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(authorizetoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(authorizetoken.FieldDeleted, field.TypeBool, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizetoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AuthorizeTokenUpdateOne is the builder for updating a single AuthorizeToken entity.
type AuthorizeTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthorizeTokenMutation
}

// SetTeslaCode sets the "tesla_code" field.
func (_u *AuthorizeTokenUpdateOne) SetTeslaCode(v string) *AuthorizeTokenUpdateOne {
	_u.mutation.SetTeslaCode(v)
	return _u
}

// SetNillableTeslaCode sets the "tesla_code" field if the given value is not nil.
func (_u *AuthorizeTokenUpdateOne) SetNillableTeslaCode(v *string) *AuthorizeTokenUpdateOne {
	if v != nil {
		_u.SetTeslaCode(*v)
	}
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *AuthorizeTokenUpdateOne) SetClientID(v string) *AuthorizeTokenUpdateOne {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *AuthorizeTokenUpdateOne) SetNillableClientID(v *string) *AuthorizeTokenUpdateOne {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// SetClientSecret sets the "client_secret" field.
func (_u *AuthorizeTokenUpdateOne) SetClientSecret(v string) *AuthorizeTokenUpdateOne {
	_u.mutation.SetClientSecret(v)
	return _u
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (_u *AuthorizeTokenUpdateOne) SetNillableClientSecret(v *string) *AuthorizeTokenUpdateOne {
	if v != nil {
		_u.SetClientSecret(*v)
	}
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *AuthorizeTokenUpdateOne) SetAccessToken(v string) *AuthorizeTokenUpdateOne {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *AuthorizeTokenUpdateOne) SetNillableAccessToken(v *string) *AuthorizeTokenUpdateOne {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *AuthorizeTokenUpdateOne) SetRefreshToken(v string) *AuthorizeTokenUpdateOne {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *AuthorizeTokenUpdateOne) SetNillableRefreshToken(v *string) *AuthorizeTokenUpdateOne {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// SetScope sets the "scope" field.
func (_u *AuthorizeTokenUpdateOne) SetScope(v string) *AuthorizeTokenUpdateOne {
	_u.mutation.SetScope(v)
	return _u
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (_u *AuthorizeTokenUpdateOne) SetNillableScope(v *string) *AuthorizeTokenUpdateOne {
	if v != nil {
		_u.SetScope(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *AuthorizeTokenUpdateOne) SetCreatedAt(v time.Time) *AuthorizeTokenUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *AuthorizeTokenUpdateOne) SetNillableCreatedAt(v *time.Time) *AuthorizeTokenUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AuthorizeTokenUpdateOne) SetUpdatedAt(v time.Time) *AuthorizeTokenUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *AuthorizeTokenUpdateOne) SetNillableUpdatedAt(v *time.Time) *AuthorizeTokenUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *AuthorizeTokenUpdateOne) SetDeleted(v bool) *AuthorizeTokenUpdateOne {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *AuthorizeTokenUpdateOne) SetNillableDeleted(v *bool) *AuthorizeTokenUpdateOne {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// Mutation returns the AuthorizeTokenMutation object of the builder.
func (_u *AuthorizeTokenUpdateOne) Mutation() *AuthorizeTokenMutation {
	return _u.mutation
}

// Where appends a list predicates to the AuthorizeTokenUpdate builder.
func (_u *AuthorizeTokenUpdateOne) Where(ps ...predicate.AuthorizeToken) *AuthorizeTokenUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AuthorizeTokenUpdateOne) Select(field string, fields ...string) *AuthorizeTokenUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AuthorizeToken entity.
func (_u *AuthorizeTokenUpdateOne) Save(ctx context.Context) (*AuthorizeToken, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuthorizeTokenUpdateOne) SaveX(ctx context.Context) *AuthorizeToken {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AuthorizeTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuthorizeTokenUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AuthorizeTokenUpdateOne) sqlSave(ctx context.Context) (_node *AuthorizeToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(authorizetoken.Table, authorizetoken.Columns, sqlgraph.NewFieldSpec(authorizetoken.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthorizeToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authorizetoken.FieldID)
		for _, f := range fields {
			if !authorizetoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authorizetoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.TeslaCode(); ok {
		_spec.SetField(authorizetoken.FieldTeslaCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(authorizetoken.FieldClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClientSecret(); ok {
		_spec.SetField(authorizetoken.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(authorizetoken.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(authorizetoken.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scope(); ok {
		_spec.SetField(authorizetoken.FieldScope, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(authorizetoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(authorizetoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(authorizetoken.FieldDeleted, field.TypeBool, value)
	}
	_node = &AuthorizeToken{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizetoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
