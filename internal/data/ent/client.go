// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"teslatrack/internal/data/ent/migrate"

	"teslatrack/internal/data/ent/authorize"
	"teslatrack/internal/data/ent/authorizetoken"
	"teslatrack/internal/data/ent/partner"
	"teslatrack/internal/data/ent/user"
	"teslatrack/internal/data/ent/vehicle"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Authorize is the client for interacting with the Authorize builders.
	Authorize *AuthorizeClient
	// AuthorizeToken is the client for interacting with the AuthorizeToken builders.
	AuthorizeToken *AuthorizeTokenClient
	// Partner is the client for interacting with the Partner builders.
	Partner *PartnerClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Vehicle is the client for interacting with the Vehicle builders.
	Vehicle *VehicleClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Authorize = NewAuthorizeClient(c.config)
	c.AuthorizeToken = NewAuthorizeTokenClient(c.config)
	c.Partner = NewPartnerClient(c.config)
	c.User = NewUserClient(c.config)
	c.Vehicle = NewVehicleClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Authorize:      NewAuthorizeClient(cfg),
		AuthorizeToken: NewAuthorizeTokenClient(cfg),
		Partner:        NewPartnerClient(cfg),
		User:           NewUserClient(cfg),
		Vehicle:        NewVehicleClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Authorize:      NewAuthorizeClient(cfg),
		AuthorizeToken: NewAuthorizeTokenClient(cfg),
		Partner:        NewPartnerClient(cfg),
		User:           NewUserClient(cfg),
		Vehicle:        NewVehicleClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Authorize.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Authorize.Use(hooks...)
	c.AuthorizeToken.Use(hooks...)
	c.Partner.Use(hooks...)
	c.User.Use(hooks...)
	c.Vehicle.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Authorize.Intercept(interceptors...)
	c.AuthorizeToken.Intercept(interceptors...)
	c.Partner.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.Vehicle.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuthorizeMutation:
		return c.Authorize.mutate(ctx, m)
	case *AuthorizeTokenMutation:
		return c.AuthorizeToken.mutate(ctx, m)
	case *PartnerMutation:
		return c.Partner.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VehicleMutation:
		return c.Vehicle.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuthorizeClient is a client for the Authorize schema.
type AuthorizeClient struct {
	config
}

// NewAuthorizeClient returns a client for the Authorize from the given config.
func NewAuthorizeClient(c config) *AuthorizeClient {
	return &AuthorizeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authorize.Hooks(f(g(h())))`.
func (c *AuthorizeClient) Use(hooks ...Hook) {
	c.hooks.Authorize = append(c.hooks.Authorize, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authorize.Intercept(f(g(h())))`.
func (c *AuthorizeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Authorize = append(c.inters.Authorize, interceptors...)
}

// Create returns a builder for creating a Authorize entity.
func (c *AuthorizeClient) Create() *AuthorizeCreate {
	mutation := newAuthorizeMutation(c.config, OpCreate)
	return &AuthorizeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Authorize entities.
func (c *AuthorizeClient) CreateBulk(builders ...*AuthorizeCreate) *AuthorizeCreateBulk {
	return &AuthorizeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthorizeClient) MapCreateBulk(slice any, setFunc func(*AuthorizeCreate, int)) *AuthorizeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthorizeCreateBulk{err: fmt.Errorf("calling to AuthorizeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthorizeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthorizeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Authorize.
func (c *AuthorizeClient) Update() *AuthorizeUpdate {
	mutation := newAuthorizeMutation(c.config, OpUpdate)
	return &AuthorizeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthorizeClient) UpdateOne(_m *Authorize) *AuthorizeUpdateOne {
	mutation := newAuthorizeMutation(c.config, OpUpdateOne, withAuthorize(_m))
	return &AuthorizeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthorizeClient) UpdateOneID(id int) *AuthorizeUpdateOne {
	mutation := newAuthorizeMutation(c.config, OpUpdateOne, withAuthorizeID(id))
	return &AuthorizeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Authorize.
func (c *AuthorizeClient) Delete() *AuthorizeDelete {
	mutation := newAuthorizeMutation(c.config, OpDelete)
	return &AuthorizeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthorizeClient) DeleteOne(_m *Authorize) *AuthorizeDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthorizeClient) DeleteOneID(id int) *AuthorizeDeleteOne {
	builder := c.Delete().Where(authorize.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthorizeDeleteOne{builder}
}

// Query returns a query builder for Authorize.
func (c *AuthorizeClient) Query() *AuthorizeQuery {
	return &AuthorizeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthorize},
		inters: c.Interceptors(),
	}
}

// Get returns a Authorize entity by its id.
func (c *AuthorizeClient) Get(ctx context.Context, id int) (*Authorize, error) {
	return c.Query().Where(authorize.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthorizeClient) GetX(ctx context.Context, id int) *Authorize {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthorizeClient) Hooks() []Hook {
	return c.hooks.Authorize
}

// Interceptors returns the client interceptors.
func (c *AuthorizeClient) Interceptors() []Interceptor {
	return c.inters.Authorize
}

func (c *AuthorizeClient) mutate(ctx context.Context, m *AuthorizeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthorizeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthorizeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthorizeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthorizeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Authorize mutation op: %q", m.Op())
	}
}

// AuthorizeTokenClient is a client for the AuthorizeToken schema.
type AuthorizeTokenClient struct {
	config
}

// NewAuthorizeTokenClient returns a client for the AuthorizeToken from the given config.
func NewAuthorizeTokenClient(c config) *AuthorizeTokenClient {
	return &AuthorizeTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authorizetoken.Hooks(f(g(h())))`.
func (c *AuthorizeTokenClient) Use(hooks ...Hook) {
	c.hooks.AuthorizeToken = append(c.hooks.AuthorizeToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authorizetoken.Intercept(f(g(h())))`.
func (c *AuthorizeTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuthorizeToken = append(c.inters.AuthorizeToken, interceptors...)
}

// Create returns a builder for creating a AuthorizeToken entity.
func (c *AuthorizeTokenClient) Create() *AuthorizeTokenCreate {
	mutation := newAuthorizeTokenMutation(c.config, OpCreate)
	return &AuthorizeTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthorizeToken entities.
func (c *AuthorizeTokenClient) CreateBulk(builders ...*AuthorizeTokenCreate) *AuthorizeTokenCreateBulk {
	return &AuthorizeTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthorizeTokenClient) MapCreateBulk(slice any, setFunc func(*AuthorizeTokenCreate, int)) *AuthorizeTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthorizeTokenCreateBulk{err: fmt.Errorf("calling to AuthorizeTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthorizeTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthorizeTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthorizeToken.
func (c *AuthorizeTokenClient) Update() *AuthorizeTokenUpdate {
	mutation := newAuthorizeTokenMutation(c.config, OpUpdate)
	return &AuthorizeTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthorizeTokenClient) UpdateOne(_m *AuthorizeToken) *AuthorizeTokenUpdateOne {
	mutation := newAuthorizeTokenMutation(c.config, OpUpdateOne, withAuthorizeToken(_m))
	return &AuthorizeTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthorizeTokenClient) UpdateOneID(id int) *AuthorizeTokenUpdateOne {
	mutation := newAuthorizeTokenMutation(c.config, OpUpdateOne, withAuthorizeTokenID(id))
	return &AuthorizeTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthorizeToken.
func (c *AuthorizeTokenClient) Delete() *AuthorizeTokenDelete {
	mutation := newAuthorizeTokenMutation(c.config, OpDelete)
	return &AuthorizeTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthorizeTokenClient) DeleteOne(_m *AuthorizeToken) *AuthorizeTokenDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthorizeTokenClient) DeleteOneID(id int) *AuthorizeTokenDeleteOne {
	builder := c.Delete().Where(authorizetoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthorizeTokenDeleteOne{builder}
}

// Query returns a query builder for AuthorizeToken.
func (c *AuthorizeTokenClient) Query() *AuthorizeTokenQuery {
	return &AuthorizeTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthorizeToken},
		inters: c.Interceptors(),
	}
}

// Get returns a AuthorizeToken entity by its id.
func (c *AuthorizeTokenClient) Get(ctx context.Context, id int) (*AuthorizeToken, error) {
	return c.Query().Where(authorizetoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthorizeTokenClient) GetX(ctx context.Context, id int) *AuthorizeToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthorizeTokenClient) Hooks() []Hook {
	return c.hooks.AuthorizeToken
}

// Interceptors returns the client interceptors.
func (c *AuthorizeTokenClient) Interceptors() []Interceptor {
	return c.inters.AuthorizeToken
}

func (c *AuthorizeTokenClient) mutate(ctx context.Context, m *AuthorizeTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthorizeTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthorizeTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthorizeTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthorizeTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuthorizeToken mutation op: %q", m.Op())
	}
}

// PartnerClient is a client for the Partner schema.
type PartnerClient struct {
	config
}

// NewPartnerClient returns a client for the Partner from the given config.
func NewPartnerClient(c config) *PartnerClient {
	return &PartnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `partner.Hooks(f(g(h())))`.
func (c *PartnerClient) Use(hooks ...Hook) {
	c.hooks.Partner = append(c.hooks.Partner, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `partner.Intercept(f(g(h())))`.
func (c *PartnerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Partner = append(c.inters.Partner, interceptors...)
}

// Create returns a builder for creating a Partner entity.
func (c *PartnerClient) Create() *PartnerCreate {
	mutation := newPartnerMutation(c.config, OpCreate)
	return &PartnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Partner entities.
func (c *PartnerClient) CreateBulk(builders ...*PartnerCreate) *PartnerCreateBulk {
	return &PartnerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PartnerClient) MapCreateBulk(slice any, setFunc func(*PartnerCreate, int)) *PartnerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PartnerCreateBulk{err: fmt.Errorf("calling to PartnerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PartnerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PartnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Partner.
func (c *PartnerClient) Update() *PartnerUpdate {
	mutation := newPartnerMutation(c.config, OpUpdate)
	return &PartnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartnerClient) UpdateOne(_m *Partner) *PartnerUpdateOne {
	mutation := newPartnerMutation(c.config, OpUpdateOne, withPartner(_m))
	return &PartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartnerClient) UpdateOneID(id int) *PartnerUpdateOne {
	mutation := newPartnerMutation(c.config, OpUpdateOne, withPartnerID(id))
	return &PartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Partner.
func (c *PartnerClient) Delete() *PartnerDelete {
	mutation := newPartnerMutation(c.config, OpDelete)
	return &PartnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartnerClient) DeleteOne(_m *Partner) *PartnerDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartnerClient) DeleteOneID(id int) *PartnerDeleteOne {
	builder := c.Delete().Where(partner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartnerDeleteOne{builder}
}

// Query returns a query builder for Partner.
func (c *PartnerClient) Query() *PartnerQuery {
	return &PartnerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePartner},
		inters: c.Interceptors(),
	}
}

// Get returns a Partner entity by its id.
func (c *PartnerClient) Get(ctx context.Context, id int) (*Partner, error) {
	return c.Query().Where(partner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartnerClient) GetX(ctx context.Context, id int) *Partner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PartnerClient) Hooks() []Hook {
	return c.hooks.Partner
}

// Interceptors returns the client interceptors.
func (c *PartnerClient) Interceptors() []Interceptor {
	return c.inters.Partner
}

func (c *PartnerClient) mutate(ctx context.Context, m *PartnerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartnerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartnerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartnerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Partner mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VehicleClient is a client for the Vehicle schema.
type VehicleClient struct {
	config
}

// NewVehicleClient returns a client for the Vehicle from the given config.
func NewVehicleClient(c config) *VehicleClient {
	return &VehicleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehicle.Hooks(f(g(h())))`.
func (c *VehicleClient) Use(hooks ...Hook) {
	c.hooks.Vehicle = append(c.hooks.Vehicle, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vehicle.Intercept(f(g(h())))`.
func (c *VehicleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Vehicle = append(c.inters.Vehicle, interceptors...)
}

// Create returns a builder for creating a Vehicle entity.
func (c *VehicleClient) Create() *VehicleCreate {
	mutation := newVehicleMutation(c.config, OpCreate)
	return &VehicleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vehicle entities.
func (c *VehicleClient) CreateBulk(builders ...*VehicleCreate) *VehicleCreateBulk {
	return &VehicleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VehicleClient) MapCreateBulk(slice any, setFunc func(*VehicleCreate, int)) *VehicleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VehicleCreateBulk{err: fmt.Errorf("calling to VehicleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VehicleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VehicleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vehicle.
func (c *VehicleClient) Update() *VehicleUpdate {
	mutation := newVehicleMutation(c.config, OpUpdate)
	return &VehicleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleClient) UpdateOne(_m *Vehicle) *VehicleUpdateOne {
	mutation := newVehicleMutation(c.config, OpUpdateOne, withVehicle(_m))
	return &VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleClient) UpdateOneID(id int) *VehicleUpdateOne {
	mutation := newVehicleMutation(c.config, OpUpdateOne, withVehicleID(id))
	return &VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vehicle.
func (c *VehicleClient) Delete() *VehicleDelete {
	mutation := newVehicleMutation(c.config, OpDelete)
	return &VehicleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VehicleClient) DeleteOne(_m *Vehicle) *VehicleDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VehicleClient) DeleteOneID(id int) *VehicleDeleteOne {
	builder := c.Delete().Where(vehicle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleDeleteOne{builder}
}

// Query returns a query builder for Vehicle.
func (c *VehicleClient) Query() *VehicleQuery {
	return &VehicleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVehicle},
		inters: c.Interceptors(),
	}
}

// Get returns a Vehicle entity by its id.
func (c *VehicleClient) Get(ctx context.Context, id int) (*Vehicle, error) {
	return c.Query().Where(vehicle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleClient) GetX(ctx context.Context, id int) *Vehicle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VehicleClient) Hooks() []Hook {
	return c.hooks.Vehicle
}

// Interceptors returns the client interceptors.
func (c *VehicleClient) Interceptors() []Interceptor {
	return c.inters.Vehicle
}

func (c *VehicleClient) mutate(ctx context.Context, m *VehicleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VehicleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VehicleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VehicleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Vehicle mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Authorize, AuthorizeToken, Partner, User, Vehicle []ent.Hook
	}
	inters struct {
		Authorize, AuthorizeToken, Partner, User, Vehicle []ent.Interceptor
	}
)
