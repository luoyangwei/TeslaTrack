// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"teslatrack/internal/data/ent/vehicle"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 车辆
type Vehicle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 车辆 VIN 码
	Vin string `json:"vin,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// AccessType holds the value of the "access_type" field.
	AccessType string `json:"access_type,omitempty"`
	// State holds the value of the "state" field.
	State int8 `json:"state,omitempty"`
	// InService holds the value of the "in_service" field.
	InService *int8 `json:"in_service,omitempty"`
	// CalendarEnabled holds the value of the "calendar_enabled" field.
	CalendarEnabled *int8 `json:"calendar_enabled,omitempty"`
	// CarType holds the value of the "car_type" field.
	CarType string `json:"car_type,omitempty"`
	// APIVersion holds the value of the "api_version" field.
	APIVersion string `json:"api_version,omitempty"`
	// 原始数据
	RawData string `json:"raw_data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted      bool `json:"deleted,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vehicle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vehicle.FieldDeleted:
			values[i] = new(sql.NullBool)
		case vehicle.FieldID, vehicle.FieldUserID, vehicle.FieldState, vehicle.FieldInService, vehicle.FieldCalendarEnabled:
			values[i] = new(sql.NullInt64)
		case vehicle.FieldVin, vehicle.FieldDisplayName, vehicle.FieldAccessType, vehicle.FieldCarType, vehicle.FieldAPIVersion, vehicle.FieldRawData:
			values[i] = new(sql.NullString)
		case vehicle.FieldCreatedAt, vehicle.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vehicle fields.
func (_m *Vehicle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vehicle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case vehicle.FieldVin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vin", values[i])
			} else if value.Valid {
				_m.Vin = value.String
			}
		case vehicle.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = int(value.Int64)
			}
		case vehicle.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				_m.DisplayName = value.String
			}
		case vehicle.FieldAccessType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_type", values[i])
			} else if value.Valid {
				_m.AccessType = value.String
			}
		case vehicle.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				_m.State = int8(value.Int64)
			}
		case vehicle.FieldInService:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field in_service", values[i])
			} else if value.Valid {
				_m.InService = new(int8)
				*_m.InService = int8(value.Int64)
			}
		case vehicle.FieldCalendarEnabled:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field calendar_enabled", values[i])
			} else if value.Valid {
				_m.CalendarEnabled = new(int8)
				*_m.CalendarEnabled = int8(value.Int64)
			}
		case vehicle.FieldCarType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field car_type", values[i])
			} else if value.Valid {
				_m.CarType = value.String
			}
		case vehicle.FieldAPIVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_version", values[i])
			} else if value.Valid {
				_m.APIVersion = value.String
			}
		case vehicle.FieldRawData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field raw_data", values[i])
			} else if value.Valid {
				_m.RawData = value.String
			}
		case vehicle.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case vehicle.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case vehicle.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				_m.Deleted = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vehicle.
// This includes values selected through modifiers, order, etc.
func (_m *Vehicle) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Vehicle.
// Note that you need to call Vehicle.Unwrap() before calling this method if this Vehicle
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Vehicle) Update() *VehicleUpdateOne {
	return NewVehicleClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Vehicle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Vehicle) Unwrap() *Vehicle {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vehicle is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Vehicle) String() string {
	var builder strings.Builder
	builder.WriteString("Vehicle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("vin=")
	builder.WriteString(_m.Vin)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(_m.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("access_type=")
	builder.WriteString(_m.AccessType)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", _m.State))
	builder.WriteString(", ")
	if v := _m.InService; v != nil {
		builder.WriteString("in_service=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.CalendarEnabled; v != nil {
		builder.WriteString("calendar_enabled=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("car_type=")
	builder.WriteString(_m.CarType)
	builder.WriteString(", ")
	builder.WriteString("api_version=")
	builder.WriteString(_m.APIVersion)
	builder.WriteString(", ")
	builder.WriteString("raw_data=")
	builder.WriteString(_m.RawData)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", _m.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Vehicles is a parsable slice of Vehicle.
type Vehicles []*Vehicle
