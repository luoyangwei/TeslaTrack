// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"teslatrack/internal/data/ent/partner"
	"teslatrack/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerUpdate is the builder for updating Partner entities.
type PartnerUpdate struct {
	config
	hooks    []Hook
	mutation *PartnerMutation
}

// Where appends a list predicates to the PartnerUpdate builder.
func (_u *PartnerUpdate) Where(ps ...predicate.Partner) *PartnerUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *PartnerUpdate) SetClientID(v string) *PartnerUpdate {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *PartnerUpdate) SetNillableClientID(v *string) *PartnerUpdate {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *PartnerUpdate) SetAccessToken(v string) *PartnerUpdate {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *PartnerUpdate) SetNillableAccessToken(v *string) *PartnerUpdate {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// ClearAccessToken clears the value of the "access_token" field.
func (_u *PartnerUpdate) ClearAccessToken() *PartnerUpdate {
	_u.mutation.ClearAccessToken()
	return _u
}

// SetExpiresIn sets the "expires_in" field.
func (_u *PartnerUpdate) SetExpiresIn(v int) *PartnerUpdate {
	_u.mutation.ResetExpiresIn()
	_u.mutation.SetExpiresIn(v)
	return _u
}

// SetNillableExpiresIn sets the "expires_in" field if the given value is not nil.
func (_u *PartnerUpdate) SetNillableExpiresIn(v *int) *PartnerUpdate {
	if v != nil {
		_u.SetExpiresIn(*v)
	}
	return _u
}

// AddExpiresIn adds value to the "expires_in" field.
func (_u *PartnerUpdate) AddExpiresIn(v int) *PartnerUpdate {
	_u.mutation.AddExpiresIn(v)
	return _u
}

// ClearExpiresIn clears the value of the "expires_in" field.
func (_u *PartnerUpdate) ClearExpiresIn() *PartnerUpdate {
	_u.mutation.ClearExpiresIn()
	return _u
}

// SetTokenType sets the "token_type" field.
func (_u *PartnerUpdate) SetTokenType(v string) *PartnerUpdate {
	_u.mutation.SetTokenType(v)
	return _u
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (_u *PartnerUpdate) SetNillableTokenType(v *string) *PartnerUpdate {
	if v != nil {
		_u.SetTokenType(*v)
	}
	return _u
}

// ClearTokenType clears the value of the "token_type" field.
func (_u *PartnerUpdate) ClearTokenType() *PartnerUpdate {
	_u.mutation.ClearTokenType()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PartnerUpdate) SetUpdatedAt(v time.Time) *PartnerUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *PartnerUpdate) SetDeleted(v bool) *PartnerUpdate {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *PartnerUpdate) SetNillableDeleted(v *bool) *PartnerUpdate {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// Mutation returns the PartnerMutation object of the builder.
func (_u *PartnerUpdate) Mutation() *PartnerMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PartnerUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnerUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PartnerUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnerUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PartnerUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := partner.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PartnerUpdate) check() error {
	if v, ok := _u.mutation.TokenType(); ok {
		if err := partner.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`ent: validator failed for field "Partner.token_type": %w`, err)}
		}
	}
	return nil
}

func (_u *PartnerUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partner.Table, partner.Columns, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(partner.FieldClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(partner.FieldAccessToken, field.TypeString, value)
	}
	if _u.mutation.AccessTokenCleared() {
		_spec.ClearField(partner.FieldAccessToken, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiresIn(); ok {
		_spec.SetField(partner.FieldExpiresIn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedExpiresIn(); ok {
		_spec.AddField(partner.FieldExpiresIn, field.TypeInt, value)
	}
	if _u.mutation.ExpiresInCleared() {
		_spec.ClearField(partner.FieldExpiresIn, field.TypeInt)
	}
	if value, ok := _u.mutation.TokenType(); ok {
		_spec.SetField(partner.FieldTokenType, field.TypeString, value)
	}
	if _u.mutation.TokenTypeCleared() {
		_spec.ClearField(partner.FieldTokenType, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(partner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(partner.FieldDeleted, field.TypeBool, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PartnerUpdateOne is the builder for updating a single Partner entity.
type PartnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartnerMutation
}

// SetClientID sets the "client_id" field.
func (_u *PartnerUpdateOne) SetClientID(v string) *PartnerUpdateOne {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *PartnerUpdateOne) SetNillableClientID(v *string) *PartnerUpdateOne {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *PartnerUpdateOne) SetAccessToken(v string) *PartnerUpdateOne {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *PartnerUpdateOne) SetNillableAccessToken(v *string) *PartnerUpdateOne {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// ClearAccessToken clears the value of the "access_token" field.
func (_u *PartnerUpdateOne) ClearAccessToken() *PartnerUpdateOne {
	_u.mutation.ClearAccessToken()
	return _u
}

// SetExpiresIn sets the "expires_in" field.
func (_u *PartnerUpdateOne) SetExpiresIn(v int) *PartnerUpdateOne {
	_u.mutation.ResetExpiresIn()
	_u.mutation.SetExpiresIn(v)
	return _u
}

// SetNillableExpiresIn sets the "expires_in" field if the given value is not nil.
func (_u *PartnerUpdateOne) SetNillableExpiresIn(v *int) *PartnerUpdateOne {
	if v != nil {
		_u.SetExpiresIn(*v)
	}
	return _u
}

// AddExpiresIn adds value to the "expires_in" field.
func (_u *PartnerUpdateOne) AddExpiresIn(v int) *PartnerUpdateOne {
	_u.mutation.AddExpiresIn(v)
	return _u
}

// ClearExpiresIn clears the value of the "expires_in" field.
func (_u *PartnerUpdateOne) ClearExpiresIn() *PartnerUpdateOne {
	_u.mutation.ClearExpiresIn()
	return _u
}

// SetTokenType sets the "token_type" field.
func (_u *PartnerUpdateOne) SetTokenType(v string) *PartnerUpdateOne {
	_u.mutation.SetTokenType(v)
	return _u
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (_u *PartnerUpdateOne) SetNillableTokenType(v *string) *PartnerUpdateOne {
	if v != nil {
		_u.SetTokenType(*v)
	}
	return _u
}

// ClearTokenType clears the value of the "token_type" field.
func (_u *PartnerUpdateOne) ClearTokenType() *PartnerUpdateOne {
	_u.mutation.ClearTokenType()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PartnerUpdateOne) SetUpdatedAt(v time.Time) *PartnerUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *PartnerUpdateOne) SetDeleted(v bool) *PartnerUpdateOne {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *PartnerUpdateOne) SetNillableDeleted(v *bool) *PartnerUpdateOne {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// Mutation returns the PartnerMutation object of the builder.
func (_u *PartnerUpdateOne) Mutation() *PartnerMutation {
	return _u.mutation
}

// Where appends a list predicates to the PartnerUpdate builder.
func (_u *PartnerUpdateOne) Where(ps ...predicate.Partner) *PartnerUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PartnerUpdateOne) Select(field string, fields ...string) *PartnerUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Partner entity.
func (_u *PartnerUpdateOne) Save(ctx context.Context) (*Partner, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnerUpdateOne) SaveX(ctx context.Context) *Partner {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PartnerUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnerUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PartnerUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := partner.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PartnerUpdateOne) check() error {
	if v, ok := _u.mutation.TokenType(); ok {
		if err := partner.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`ent: validator failed for field "Partner.token_type": %w`, err)}
		}
	}
	return nil
}

func (_u *PartnerUpdateOne) sqlSave(ctx context.Context) (_node *Partner, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(partner.Table, partner.Columns, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Partner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partner.FieldID)
		for _, f := range fields {
			if !partner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(partner.FieldClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(partner.FieldAccessToken, field.TypeString, value)
	}
	if _u.mutation.AccessTokenCleared() {
		_spec.ClearField(partner.FieldAccessToken, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiresIn(); ok {
		_spec.SetField(partner.FieldExpiresIn, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedExpiresIn(); ok {
		_spec.AddField(partner.FieldExpiresIn, field.TypeInt, value)
	}
	if _u.mutation.ExpiresInCleared() {
		_spec.ClearField(partner.FieldExpiresIn, field.TypeInt)
	}
	if value, ok := _u.mutation.TokenType(); ok {
		_spec.SetField(partner.FieldTokenType, field.TypeString, value)
	}
	if _u.mutation.TokenTypeCleared() {
		_spec.ClearField(partner.FieldTokenType, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(partner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(partner.FieldDeleted, field.TypeBool, value)
	}
	_node = &Partner{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
