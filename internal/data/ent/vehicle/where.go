// Code generated by ent, DO NOT EDIT.

package vehicle

import (
	"teslatrack/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldID, id))
}

// Vin applies equality check predicate on the "vin" field. It's identical to VinEQ.
func Vin(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldVin, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldUserID, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldDisplayName, v))
}

// AccessType applies equality check predicate on the "access_type" field. It's identical to AccessTypeEQ.
func AccessType(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldAccessType, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldState, v))
}

// InService applies equality check predicate on the "in_service" field. It's identical to InServiceEQ.
func InService(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldInService, v))
}

// CalendarEnabled applies equality check predicate on the "calendar_enabled" field. It's identical to CalendarEnabledEQ.
func CalendarEnabled(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCalendarEnabled, v))
}

// CarType applies equality check predicate on the "car_type" field. It's identical to CarTypeEQ.
func CarType(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCarType, v))
}

// APIVersion applies equality check predicate on the "api_version" field. It's identical to APIVersionEQ.
func APIVersion(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldAPIVersion, v))
}

// RawData applies equality check predicate on the "raw_data" field. It's identical to RawDataEQ.
func RawData(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldRawData, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldUpdatedAt, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldDeleted, v))
}

// VinEQ applies the EQ predicate on the "vin" field.
func VinEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldVin, v))
}

// VinNEQ applies the NEQ predicate on the "vin" field.
func VinNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldVin, v))
}

// VinIn applies the In predicate on the "vin" field.
func VinIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldVin, vs...))
}

// VinNotIn applies the NotIn predicate on the "vin" field.
func VinNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldVin, vs...))
}

// VinGT applies the GT predicate on the "vin" field.
func VinGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldVin, v))
}

// VinGTE applies the GTE predicate on the "vin" field.
func VinGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldVin, v))
}

// VinLT applies the LT predicate on the "vin" field.
func VinLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldVin, v))
}

// VinLTE applies the LTE predicate on the "vin" field.
func VinLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldVin, v))
}

// VinContains applies the Contains predicate on the "vin" field.
func VinContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldVin, v))
}

// VinHasPrefix applies the HasPrefix predicate on the "vin" field.
func VinHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldVin, v))
}

// VinHasSuffix applies the HasSuffix predicate on the "vin" field.
func VinHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldVin, v))
}

// VinEqualFold applies the EqualFold predicate on the "vin" field.
func VinEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldVin, v))
}

// VinContainsFold applies the ContainsFold predicate on the "vin" field.
func VinContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldVin, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldUserID, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldDisplayName, v))
}

// AccessTypeEQ applies the EQ predicate on the "access_type" field.
func AccessTypeEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldAccessType, v))
}

// AccessTypeNEQ applies the NEQ predicate on the "access_type" field.
func AccessTypeNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldAccessType, v))
}

// AccessTypeIn applies the In predicate on the "access_type" field.
func AccessTypeIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldAccessType, vs...))
}

// AccessTypeNotIn applies the NotIn predicate on the "access_type" field.
func AccessTypeNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldAccessType, vs...))
}

// AccessTypeGT applies the GT predicate on the "access_type" field.
func AccessTypeGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldAccessType, v))
}

// AccessTypeGTE applies the GTE predicate on the "access_type" field.
func AccessTypeGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldAccessType, v))
}

// AccessTypeLT applies the LT predicate on the "access_type" field.
func AccessTypeLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldAccessType, v))
}

// AccessTypeLTE applies the LTE predicate on the "access_type" field.
func AccessTypeLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldAccessType, v))
}

// AccessTypeContains applies the Contains predicate on the "access_type" field.
func AccessTypeContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldAccessType, v))
}

// AccessTypeHasPrefix applies the HasPrefix predicate on the "access_type" field.
func AccessTypeHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldAccessType, v))
}

// AccessTypeHasSuffix applies the HasSuffix predicate on the "access_type" field.
func AccessTypeHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldAccessType, v))
}

// AccessTypeEqualFold applies the EqualFold predicate on the "access_type" field.
func AccessTypeEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldAccessType, v))
}

// AccessTypeContainsFold applies the ContainsFold predicate on the "access_type" field.
func AccessTypeContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldAccessType, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldState, v))
}

// InServiceEQ applies the EQ predicate on the "in_service" field.
func InServiceEQ(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldInService, v))
}

// InServiceNEQ applies the NEQ predicate on the "in_service" field.
func InServiceNEQ(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldInService, v))
}

// InServiceIn applies the In predicate on the "in_service" field.
func InServiceIn(vs ...int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldInService, vs...))
}

// InServiceNotIn applies the NotIn predicate on the "in_service" field.
func InServiceNotIn(vs ...int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldInService, vs...))
}

// InServiceGT applies the GT predicate on the "in_service" field.
func InServiceGT(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldInService, v))
}

// InServiceGTE applies the GTE predicate on the "in_service" field.
func InServiceGTE(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldInService, v))
}

// InServiceLT applies the LT predicate on the "in_service" field.
func InServiceLT(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldInService, v))
}

// InServiceLTE applies the LTE predicate on the "in_service" field.
func InServiceLTE(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldInService, v))
}

// CalendarEnabledEQ applies the EQ predicate on the "calendar_enabled" field.
func CalendarEnabledEQ(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCalendarEnabled, v))
}

// CalendarEnabledNEQ applies the NEQ predicate on the "calendar_enabled" field.
func CalendarEnabledNEQ(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldCalendarEnabled, v))
}

// CalendarEnabledIn applies the In predicate on the "calendar_enabled" field.
func CalendarEnabledIn(vs ...int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldCalendarEnabled, vs...))
}

// CalendarEnabledNotIn applies the NotIn predicate on the "calendar_enabled" field.
func CalendarEnabledNotIn(vs ...int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldCalendarEnabled, vs...))
}

// CalendarEnabledGT applies the GT predicate on the "calendar_enabled" field.
func CalendarEnabledGT(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldCalendarEnabled, v))
}

// CalendarEnabledGTE applies the GTE predicate on the "calendar_enabled" field.
func CalendarEnabledGTE(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldCalendarEnabled, v))
}

// CalendarEnabledLT applies the LT predicate on the "calendar_enabled" field.
func CalendarEnabledLT(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldCalendarEnabled, v))
}

// CalendarEnabledLTE applies the LTE predicate on the "calendar_enabled" field.
func CalendarEnabledLTE(v int8) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldCalendarEnabled, v))
}

// CarTypeEQ applies the EQ predicate on the "car_type" field.
func CarTypeEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCarType, v))
}

// CarTypeNEQ applies the NEQ predicate on the "car_type" field.
func CarTypeNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldCarType, v))
}

// CarTypeIn applies the In predicate on the "car_type" field.
func CarTypeIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldCarType, vs...))
}

// CarTypeNotIn applies the NotIn predicate on the "car_type" field.
func CarTypeNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldCarType, vs...))
}

// CarTypeGT applies the GT predicate on the "car_type" field.
func CarTypeGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldCarType, v))
}

// CarTypeGTE applies the GTE predicate on the "car_type" field.
func CarTypeGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldCarType, v))
}

// CarTypeLT applies the LT predicate on the "car_type" field.
func CarTypeLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldCarType, v))
}

// CarTypeLTE applies the LTE predicate on the "car_type" field.
func CarTypeLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldCarType, v))
}

// CarTypeContains applies the Contains predicate on the "car_type" field.
func CarTypeContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldCarType, v))
}

// CarTypeHasPrefix applies the HasPrefix predicate on the "car_type" field.
func CarTypeHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldCarType, v))
}

// CarTypeHasSuffix applies the HasSuffix predicate on the "car_type" field.
func CarTypeHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldCarType, v))
}

// CarTypeIsNil applies the IsNil predicate on the "car_type" field.
func CarTypeIsNil() predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIsNull(FieldCarType))
}

// CarTypeNotNil applies the NotNil predicate on the "car_type" field.
func CarTypeNotNil() predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotNull(FieldCarType))
}

// CarTypeEqualFold applies the EqualFold predicate on the "car_type" field.
func CarTypeEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldCarType, v))
}

// CarTypeContainsFold applies the ContainsFold predicate on the "car_type" field.
func CarTypeContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldCarType, v))
}

// APIVersionEQ applies the EQ predicate on the "api_version" field.
func APIVersionEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldAPIVersion, v))
}

// APIVersionNEQ applies the NEQ predicate on the "api_version" field.
func APIVersionNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldAPIVersion, v))
}

// APIVersionIn applies the In predicate on the "api_version" field.
func APIVersionIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldAPIVersion, vs...))
}

// APIVersionNotIn applies the NotIn predicate on the "api_version" field.
func APIVersionNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldAPIVersion, vs...))
}

// APIVersionGT applies the GT predicate on the "api_version" field.
func APIVersionGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldAPIVersion, v))
}

// APIVersionGTE applies the GTE predicate on the "api_version" field.
func APIVersionGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldAPIVersion, v))
}

// APIVersionLT applies the LT predicate on the "api_version" field.
func APIVersionLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldAPIVersion, v))
}

// APIVersionLTE applies the LTE predicate on the "api_version" field.
func APIVersionLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldAPIVersion, v))
}

// APIVersionContains applies the Contains predicate on the "api_version" field.
func APIVersionContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldAPIVersion, v))
}

// APIVersionHasPrefix applies the HasPrefix predicate on the "api_version" field.
func APIVersionHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldAPIVersion, v))
}

// APIVersionHasSuffix applies the HasSuffix predicate on the "api_version" field.
func APIVersionHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldAPIVersion, v))
}

// APIVersionIsNil applies the IsNil predicate on the "api_version" field.
func APIVersionIsNil() predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIsNull(FieldAPIVersion))
}

// APIVersionNotNil applies the NotNil predicate on the "api_version" field.
func APIVersionNotNil() predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotNull(FieldAPIVersion))
}

// APIVersionEqualFold applies the EqualFold predicate on the "api_version" field.
func APIVersionEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldAPIVersion, v))
}

// APIVersionContainsFold applies the ContainsFold predicate on the "api_version" field.
func APIVersionContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldAPIVersion, v))
}

// RawDataEQ applies the EQ predicate on the "raw_data" field.
func RawDataEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldRawData, v))
}

// RawDataNEQ applies the NEQ predicate on the "raw_data" field.
func RawDataNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldRawData, v))
}

// RawDataIn applies the In predicate on the "raw_data" field.
func RawDataIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldRawData, vs...))
}

// RawDataNotIn applies the NotIn predicate on the "raw_data" field.
func RawDataNotIn(vs ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldRawData, vs...))
}

// RawDataGT applies the GT predicate on the "raw_data" field.
func RawDataGT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldRawData, v))
}

// RawDataGTE applies the GTE predicate on the "raw_data" field.
func RawDataGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldRawData, v))
}

// RawDataLT applies the LT predicate on the "raw_data" field.
func RawDataLT(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldRawData, v))
}

// RawDataLTE applies the LTE predicate on the "raw_data" field.
func RawDataLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldRawData, v))
}

// RawDataContains applies the Contains predicate on the "raw_data" field.
func RawDataContains(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContains(FieldRawData, v))
}

// RawDataHasPrefix applies the HasPrefix predicate on the "raw_data" field.
func RawDataHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasPrefix(FieldRawData, v))
}

// RawDataHasSuffix applies the HasSuffix predicate on the "raw_data" field.
func RawDataHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldHasSuffix(FieldRawData, v))
}

// RawDataEqualFold applies the EqualFold predicate on the "raw_data" field.
func RawDataEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldRawData, v))
}

// RawDataContainsFold applies the ContainsFold predicate on the "raw_data" field.
func RawDataContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldRawData, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldDeleted, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.NotPredicates(p))
}
