// Code generated by ent, DO NOT EDIT.

package vehicle

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the vehicle type in the database.
	Label = "vehicle"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVin holds the string denoting the vin field in the database.
	FieldVin = "vin"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldAccessType holds the string denoting the access_type field in the database.
	FieldAccessType = "access_type"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldInService holds the string denoting the in_service field in the database.
	FieldInService = "in_service"
	// FieldCalendarEnabled holds the string denoting the calendar_enabled field in the database.
	FieldCalendarEnabled = "calendar_enabled"
	// FieldCarType holds the string denoting the car_type field in the database.
	FieldCarType = "car_type"
	// FieldAPIVersion holds the string denoting the api_version field in the database.
	FieldAPIVersion = "api_version"
	// FieldRawData holds the string denoting the raw_data field in the database.
	FieldRawData = "raw_data"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// Table holds the table name of the vehicle in the database.
	Table = "vehicle"
)

// Columns holds all SQL columns for vehicle fields.
var Columns = []string{
	FieldID,
	FieldVin,
	FieldUserID,
	FieldDisplayName,
	FieldAccessType,
	FieldState,
	FieldInService,
	FieldCalendarEnabled,
	FieldCarType,
	FieldAPIVersion,
	FieldRawData,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeleted,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// VinValidator is a validator for the "vin" field. It is called by the builders before save.
	VinValidator func(string) error
	// DefaultInService holds the default value on creation for the "in_service" field.
	DefaultInService int8
	// DefaultCalendarEnabled holds the default value on creation for the "calendar_enabled" field.
	DefaultCalendarEnabled int8
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeleted holds the default value on creation for the "deleted" field.
	DefaultDeleted bool
)

// OrderOption defines the ordering options for the Vehicle queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVin orders the results by the vin field.
func ByVin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVin, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByAccessType orders the results by the access_type field.
func ByAccessType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessType, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByInService orders the results by the in_service field.
func ByInService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInService, opts...).ToFunc()
}

// ByCalendarEnabled orders the results by the calendar_enabled field.
func ByCalendarEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalendarEnabled, opts...).ToFunc()
}

// ByCarType orders the results by the car_type field.
func ByCarType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarType, opts...).ToFunc()
}

// ByAPIVersion orders the results by the api_version field.
func ByAPIVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIVersion, opts...).ToFunc()
}

// ByRawData orders the results by the raw_data field.
func ByRawData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRawData, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeleted orders the results by the deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}
