// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"teslatrack/internal/data/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetAccount sets the "account" field.
func (_c *UserCreate) SetAccount(v string) *UserCreate {
	_c.mutation.SetAccount(v)
	return _c
}

// SetPassword sets the "password" field.
func (_c *UserCreate) SetPassword(v string) *UserCreate {
	_c.mutation.SetPassword(v)
	return _c
}

// SetMobile sets the "mobile" field.
func (_c *UserCreate) SetMobile(v string) *UserCreate {
	_c.mutation.SetMobile(v)
	return _c
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (_c *UserCreate) SetNillableMobile(v *string) *UserCreate {
	if v != nil {
		_c.SetMobile(*v)
	}
	return _c
}

// SetOpenID sets the "open_id" field.
func (_c *UserCreate) SetOpenID(v string) *UserCreate {
	_c.mutation.SetOpenID(v)
	return _c
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (_c *UserCreate) SetNillableOpenID(v *string) *UserCreate {
	if v != nil {
		_c.SetOpenID(*v)
	}
	return _c
}

// SetAvatar sets the "avatar" field.
func (_c *UserCreate) SetAvatar(v string) *UserCreate {
	_c.mutation.SetAvatar(v)
	return _c
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_c *UserCreate) SetNillableAvatar(v *string) *UserCreate {
	if v != nil {
		_c.SetAvatar(*v)
	}
	return _c
}

// SetNickName sets the "nick_name" field.
func (_c *UserCreate) SetNickName(v string) *UserCreate {
	_c.mutation.SetNickName(v)
	return _c
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (_c *UserCreate) SetNillableNickName(v *string) *UserCreate {
	if v != nil {
		_c.SetNickName(*v)
	}
	return _c
}

// SetIntroduction sets the "introduction" field.
func (_c *UserCreate) SetIntroduction(v string) *UserCreate {
	_c.mutation.SetIntroduction(v)
	return _c
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (_c *UserCreate) SetNillableIntroduction(v *string) *UserCreate {
	if v != nil {
		_c.SetIntroduction(*v)
	}
	return _c
}

// SetGender sets the "gender" field.
func (_c *UserCreate) SetGender(v int8) *UserCreate {
	_c.mutation.SetGender(v)
	return _c
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_c *UserCreate) SetNillableGender(v *int8) *UserCreate {
	if v != nil {
		_c.SetGender(*v)
	}
	return _c
}

// SetAskedUserID sets the "asked_user_id" field.
func (_c *UserCreate) SetAskedUserID(v int) *UserCreate {
	_c.mutation.SetAskedUserID(v)
	return _c
}

// SetNillableAskedUserID sets the "asked_user_id" field if the given value is not nil.
func (_c *UserCreate) SetNillableAskedUserID(v *int) *UserCreate {
	if v != nil {
		_c.SetAskedUserID(*v)
	}
	return _c
}

// SetAreaCode sets the "area_code" field.
func (_c *UserCreate) SetAreaCode(v string) *UserCreate {
	_c.mutation.SetAreaCode(v)
	return _c
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (_c *UserCreate) SetNillableAreaCode(v *string) *UserCreate {
	if v != nil {
		_c.SetAreaCode(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserCreate) SetUpdatedAt(v time.Time) *UserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeleted sets the "deleted" field.
func (_c *UserCreate) SetDeleted(v bool) *UserCreate {
	_c.mutation.SetDeleted(v)
	return _c
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_c *UserCreate) SetNillableDeleted(v *bool) *UserCreate {
	if v != nil {
		_c.SetDeleted(*v)
	}
	return _c
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.Gender(); !ok {
		v := user.DefaultGender
		_c.mutation.SetGender(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		v := user.DefaultDeleted
		_c.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "User.account"`)}
	}
	if _, ok := _c.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if _, ok := _c.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "User.gender"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "User.deleted"`)}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Account(); ok {
		_spec.SetField(user.FieldAccount, field.TypeString, value)
		_node.Account = value
	}
	if value, ok := _c.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := _c.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := _c.mutation.OpenID(); ok {
		_spec.SetField(user.FieldOpenID, field.TypeString, value)
		_node.OpenID = value
	}
	if value, ok := _c.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := _c.mutation.NickName(); ok {
		_spec.SetField(user.FieldNickName, field.TypeString, value)
		_node.NickName = value
	}
	if value, ok := _c.mutation.Introduction(); ok {
		_spec.SetField(user.FieldIntroduction, field.TypeString, value)
		_node.Introduction = value
	}
	if value, ok := _c.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt8, value)
		_node.Gender = &value
	}
	if value, ok := _c.mutation.AskedUserID(); ok {
		_spec.SetField(user.FieldAskedUserID, field.TypeInt, value)
		_node.AskedUserID = value
	}
	if value, ok := _c.mutation.AreaCode(); ok {
		_spec.SetField(user.FieldAreaCode, field.TypeString, value)
		_node.AreaCode = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Deleted(); ok {
		_spec.SetField(user.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
