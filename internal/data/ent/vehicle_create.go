// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"teslatrack/internal/data/ent/vehicle"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VehicleCreate is the builder for creating a Vehicle entity.
type VehicleCreate struct {
	config
	mutation *VehicleMutation
	hooks    []Hook
}

// SetVin sets the "vin" field.
func (_c *VehicleCreate) SetVin(v string) *VehicleCreate {
	_c.mutation.SetVin(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *VehicleCreate) SetUserID(v int) *VehicleCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetDisplayName sets the "display_name" field.
func (_c *VehicleCreate) SetDisplayName(v string) *VehicleCreate {
	_c.mutation.SetDisplayName(v)
	return _c
}

// SetAccessType sets the "access_type" field.
func (_c *VehicleCreate) SetAccessType(v string) *VehicleCreate {
	_c.mutation.SetAccessType(v)
	return _c
}

// SetState sets the "state" field.
func (_c *VehicleCreate) SetState(v int8) *VehicleCreate {
	_c.mutation.SetState(v)
	return _c
}

// SetInService sets the "in_service" field.
func (_c *VehicleCreate) SetInService(v int8) *VehicleCreate {
	_c.mutation.SetInService(v)
	return _c
}

// SetNillableInService sets the "in_service" field if the given value is not nil.
func (_c *VehicleCreate) SetNillableInService(v *int8) *VehicleCreate {
	if v != nil {
		_c.SetInService(*v)
	}
	return _c
}

// SetCalendarEnabled sets the "calendar_enabled" field.
func (_c *VehicleCreate) SetCalendarEnabled(v int8) *VehicleCreate {
	_c.mutation.SetCalendarEnabled(v)
	return _c
}

// SetNillableCalendarEnabled sets the "calendar_enabled" field if the given value is not nil.
func (_c *VehicleCreate) SetNillableCalendarEnabled(v *int8) *VehicleCreate {
	if v != nil {
		_c.SetCalendarEnabled(*v)
	}
	return _c
}

// SetCarType sets the "car_type" field.
func (_c *VehicleCreate) SetCarType(v string) *VehicleCreate {
	_c.mutation.SetCarType(v)
	return _c
}

// SetNillableCarType sets the "car_type" field if the given value is not nil.
func (_c *VehicleCreate) SetNillableCarType(v *string) *VehicleCreate {
	if v != nil {
		_c.SetCarType(*v)
	}
	return _c
}

// SetAPIVersion sets the "api_version" field.
func (_c *VehicleCreate) SetAPIVersion(v string) *VehicleCreate {
	_c.mutation.SetAPIVersion(v)
	return _c
}

// SetNillableAPIVersion sets the "api_version" field if the given value is not nil.
func (_c *VehicleCreate) SetNillableAPIVersion(v *string) *VehicleCreate {
	if v != nil {
		_c.SetAPIVersion(*v)
	}
	return _c
}

// SetRawData sets the "raw_data" field.
func (_c *VehicleCreate) SetRawData(v string) *VehicleCreate {
	_c.mutation.SetRawData(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *VehicleCreate) SetCreatedAt(v time.Time) *VehicleCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *VehicleCreate) SetNillableCreatedAt(v *time.Time) *VehicleCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *VehicleCreate) SetUpdatedAt(v time.Time) *VehicleCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *VehicleCreate) SetNillableUpdatedAt(v *time.Time) *VehicleCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeleted sets the "deleted" field.
func (_c *VehicleCreate) SetDeleted(v bool) *VehicleCreate {
	_c.mutation.SetDeleted(v)
	return _c
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_c *VehicleCreate) SetNillableDeleted(v *bool) *VehicleCreate {
	if v != nil {
		_c.SetDeleted(*v)
	}
	return _c
}

// Mutation returns the VehicleMutation object of the builder.
func (_c *VehicleCreate) Mutation() *VehicleMutation {
	return _c.mutation
}

// Save creates the Vehicle in the database.
func (_c *VehicleCreate) Save(ctx context.Context) (*Vehicle, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *VehicleCreate) SaveX(ctx context.Context) *Vehicle {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VehicleCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VehicleCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *VehicleCreate) defaults() {
	if _, ok := _c.mutation.InService(); !ok {
		v := vehicle.DefaultInService
		_c.mutation.SetInService(v)
	}
	if _, ok := _c.mutation.CalendarEnabled(); !ok {
		v := vehicle.DefaultCalendarEnabled
		_c.mutation.SetCalendarEnabled(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := vehicle.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := vehicle.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		v := vehicle.DefaultDeleted
		_c.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *VehicleCreate) check() error {
	if _, ok := _c.mutation.Vin(); !ok {
		return &ValidationError{Name: "vin", err: errors.New(`ent: missing required field "Vehicle.vin"`)}
	}
	if v, ok := _c.mutation.Vin(); ok {
		if err := vehicle.VinValidator(v); err != nil {
			return &ValidationError{Name: "vin", err: fmt.Errorf(`ent: validator failed for field "Vehicle.vin": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Vehicle.user_id"`)}
	}
	if _, ok := _c.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "Vehicle.display_name"`)}
	}
	if _, ok := _c.mutation.AccessType(); !ok {
		return &ValidationError{Name: "access_type", err: errors.New(`ent: missing required field "Vehicle.access_type"`)}
	}
	if _, ok := _c.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Vehicle.state"`)}
	}
	if _, ok := _c.mutation.InService(); !ok {
		return &ValidationError{Name: "in_service", err: errors.New(`ent: missing required field "Vehicle.in_service"`)}
	}
	if _, ok := _c.mutation.CalendarEnabled(); !ok {
		return &ValidationError{Name: "calendar_enabled", err: errors.New(`ent: missing required field "Vehicle.calendar_enabled"`)}
	}
	if _, ok := _c.mutation.RawData(); !ok {
		return &ValidationError{Name: "raw_data", err: errors.New(`ent: missing required field "Vehicle.raw_data"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Vehicle.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Vehicle.updated_at"`)}
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Vehicle.deleted"`)}
	}
	return nil
}

func (_c *VehicleCreate) sqlSave(ctx context.Context) (*Vehicle, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *VehicleCreate) createSpec() (*Vehicle, *sqlgraph.CreateSpec) {
	var (
		_node = &Vehicle{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(vehicle.Table, sqlgraph.NewFieldSpec(vehicle.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Vin(); ok {
		_spec.SetField(vehicle.FieldVin, field.TypeString, value)
		_node.Vin = value
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(vehicle.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.DisplayName(); ok {
		_spec.SetField(vehicle.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := _c.mutation.AccessType(); ok {
		_spec.SetField(vehicle.FieldAccessType, field.TypeString, value)
		_node.AccessType = value
	}
	if value, ok := _c.mutation.State(); ok {
		_spec.SetField(vehicle.FieldState, field.TypeInt8, value)
		_node.State = value
	}
	if value, ok := _c.mutation.InService(); ok {
		_spec.SetField(vehicle.FieldInService, field.TypeInt8, value)
		_node.InService = &value
	}
	if value, ok := _c.mutation.CalendarEnabled(); ok {
		_spec.SetField(vehicle.FieldCalendarEnabled, field.TypeInt8, value)
		_node.CalendarEnabled = &value
	}
	if value, ok := _c.mutation.CarType(); ok {
		_spec.SetField(vehicle.FieldCarType, field.TypeString, value)
		_node.CarType = value
	}
	if value, ok := _c.mutation.APIVersion(); ok {
		_spec.SetField(vehicle.FieldAPIVersion, field.TypeString, value)
		_node.APIVersion = value
	}
	if value, ok := _c.mutation.RawData(); ok {
		_spec.SetField(vehicle.FieldRawData, field.TypeString, value)
		_node.RawData = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(vehicle.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicle.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Deleted(); ok {
		_spec.SetField(vehicle.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	return _node, _spec
}

// VehicleCreateBulk is the builder for creating many Vehicle entities in bulk.
type VehicleCreateBulk struct {
	config
	err      error
	builders []*VehicleCreate
}

// Save creates the Vehicle entities in the database.
func (_c *VehicleCreateBulk) Save(ctx context.Context) ([]*Vehicle, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Vehicle, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *VehicleCreateBulk) SaveX(ctx context.Context) []*Vehicle {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *VehicleCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *VehicleCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
