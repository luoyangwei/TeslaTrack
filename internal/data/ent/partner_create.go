// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"teslatrack/internal/data/ent/partner"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerCreate is the builder for creating a Partner entity.
type PartnerCreate struct {
	config
	mutation *PartnerMutation
	hooks    []Hook
}

// SetClientID sets the "client_id" field.
func (_c *PartnerCreate) SetClientID(v string) *PartnerCreate {
	_c.mutation.SetClientID(v)
	return _c
}

// SetAccessToken sets the "access_token" field.
func (_c *PartnerCreate) SetAccessToken(v string) *PartnerCreate {
	_c.mutation.SetAccessToken(v)
	return _c
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_c *PartnerCreate) SetNillableAccessToken(v *string) *PartnerCreate {
	if v != nil {
		_c.SetAccessToken(*v)
	}
	return _c
}

// SetExpiresIn sets the "expires_in" field.
func (_c *PartnerCreate) SetExpiresIn(v int) *PartnerCreate {
	_c.mutation.SetExpiresIn(v)
	return _c
}

// SetNillableExpiresIn sets the "expires_in" field if the given value is not nil.
func (_c *PartnerCreate) SetNillableExpiresIn(v *int) *PartnerCreate {
	if v != nil {
		_c.SetExpiresIn(*v)
	}
	return _c
}

// SetTokenType sets the "token_type" field.
func (_c *PartnerCreate) SetTokenType(v string) *PartnerCreate {
	_c.mutation.SetTokenType(v)
	return _c
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (_c *PartnerCreate) SetNillableTokenType(v *string) *PartnerCreate {
	if v != nil {
		_c.SetTokenType(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PartnerCreate) SetCreatedAt(v time.Time) *PartnerCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PartnerCreate) SetNillableCreatedAt(v *time.Time) *PartnerCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PartnerCreate) SetUpdatedAt(v time.Time) *PartnerCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PartnerCreate) SetNillableUpdatedAt(v *time.Time) *PartnerCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeleted sets the "deleted" field.
func (_c *PartnerCreate) SetDeleted(v bool) *PartnerCreate {
	_c.mutation.SetDeleted(v)
	return _c
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_c *PartnerCreate) SetNillableDeleted(v *bool) *PartnerCreate {
	if v != nil {
		_c.SetDeleted(*v)
	}
	return _c
}

// Mutation returns the PartnerMutation object of the builder.
func (_c *PartnerCreate) Mutation() *PartnerMutation {
	return _c.mutation
}

// Save creates the Partner in the database.
func (_c *PartnerCreate) Save(ctx context.Context) (*Partner, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PartnerCreate) SaveX(ctx context.Context) *Partner {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnerCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnerCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PartnerCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := partner.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := partner.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		v := partner.DefaultDeleted
		_c.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PartnerCreate) check() error {
	if _, ok := _c.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "Partner.client_id"`)}
	}
	if v, ok := _c.mutation.TokenType(); ok {
		if err := partner.TokenTypeValidator(v); err != nil {
			return &ValidationError{Name: "token_type", err: fmt.Errorf(`ent: validator failed for field "Partner.token_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Partner.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Partner.updated_at"`)}
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Partner.deleted"`)}
	}
	return nil
}

func (_c *PartnerCreate) sqlSave(ctx context.Context) (*Partner, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PartnerCreate) createSpec() (*Partner, *sqlgraph.CreateSpec) {
	var (
		_node = &Partner{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(partner.Table, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.ClientID(); ok {
		_spec.SetField(partner.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := _c.mutation.AccessToken(); ok {
		_spec.SetField(partner.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := _c.mutation.ExpiresIn(); ok {
		_spec.SetField(partner.FieldExpiresIn, field.TypeInt, value)
		_node.ExpiresIn = value
	}
	if value, ok := _c.mutation.TokenType(); ok {
		_spec.SetField(partner.FieldTokenType, field.TypeString, value)
		_node.TokenType = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(partner.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(partner.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Deleted(); ok {
		_spec.SetField(partner.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	return _node, _spec
}

// PartnerCreateBulk is the builder for creating many Partner entities in bulk.
type PartnerCreateBulk struct {
	config
	err      error
	builders []*PartnerCreate
}

// Save creates the Partner entities in the database.
func (_c *PartnerCreateBulk) Save(ctx context.Context) ([]*Partner, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Partner, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PartnerCreateBulk) SaveX(ctx context.Context) []*Partner {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PartnerCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PartnerCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
