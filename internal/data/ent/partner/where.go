// Code generated by ent, DO NOT EDIT.

package partner

import (
	"teslatrack/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldID, id))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldClientID, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldAccessToken, v))
}

// ExpiresIn applies equality check predicate on the "expires_in" field. It's identical to ExpiresInEQ.
func ExpiresIn(v int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldExpiresIn, v))
}

// TokenType applies equality check predicate on the "token_type" field. It's identical to TokenTypeEQ.
func TokenType(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldTokenType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldUpdatedAt, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldDeleted, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldClientID, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenIsNil applies the IsNil predicate on the "access_token" field.
func AccessTokenIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldAccessToken))
}

// AccessTokenNotNil applies the NotNil predicate on the "access_token" field.
func AccessTokenNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldAccessToken))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldAccessToken, v))
}

// ExpiresInEQ applies the EQ predicate on the "expires_in" field.
func ExpiresInEQ(v int) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldExpiresIn, v))
}

// ExpiresInNEQ applies the NEQ predicate on the "expires_in" field.
func ExpiresInNEQ(v int) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldExpiresIn, v))
}

// ExpiresInIn applies the In predicate on the "expires_in" field.
func ExpiresInIn(vs ...int) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldExpiresIn, vs...))
}

// ExpiresInNotIn applies the NotIn predicate on the "expires_in" field.
func ExpiresInNotIn(vs ...int) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldExpiresIn, vs...))
}

// ExpiresInGT applies the GT predicate on the "expires_in" field.
func ExpiresInGT(v int) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldExpiresIn, v))
}

// ExpiresInGTE applies the GTE predicate on the "expires_in" field.
func ExpiresInGTE(v int) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldExpiresIn, v))
}

// ExpiresInLT applies the LT predicate on the "expires_in" field.
func ExpiresInLT(v int) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldExpiresIn, v))
}

// ExpiresInLTE applies the LTE predicate on the "expires_in" field.
func ExpiresInLTE(v int) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldExpiresIn, v))
}

// ExpiresInIsNil applies the IsNil predicate on the "expires_in" field.
func ExpiresInIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldExpiresIn))
}

// ExpiresInNotNil applies the NotNil predicate on the "expires_in" field.
func ExpiresInNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldExpiresIn))
}

// TokenTypeEQ applies the EQ predicate on the "token_type" field.
func TokenTypeEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldTokenType, v))
}

// TokenTypeNEQ applies the NEQ predicate on the "token_type" field.
func TokenTypeNEQ(v string) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldTokenType, v))
}

// TokenTypeIn applies the In predicate on the "token_type" field.
func TokenTypeIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldTokenType, vs...))
}

// TokenTypeNotIn applies the NotIn predicate on the "token_type" field.
func TokenTypeNotIn(vs ...string) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldTokenType, vs...))
}

// TokenTypeGT applies the GT predicate on the "token_type" field.
func TokenTypeGT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldTokenType, v))
}

// TokenTypeGTE applies the GTE predicate on the "token_type" field.
func TokenTypeGTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldTokenType, v))
}

// TokenTypeLT applies the LT predicate on the "token_type" field.
func TokenTypeLT(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldTokenType, v))
}

// TokenTypeLTE applies the LTE predicate on the "token_type" field.
func TokenTypeLTE(v string) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldTokenType, v))
}

// TokenTypeContains applies the Contains predicate on the "token_type" field.
func TokenTypeContains(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContains(FieldTokenType, v))
}

// TokenTypeHasPrefix applies the HasPrefix predicate on the "token_type" field.
func TokenTypeHasPrefix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasPrefix(FieldTokenType, v))
}

// TokenTypeHasSuffix applies the HasSuffix predicate on the "token_type" field.
func TokenTypeHasSuffix(v string) predicate.Partner {
	return predicate.Partner(sql.FieldHasSuffix(FieldTokenType, v))
}

// TokenTypeIsNil applies the IsNil predicate on the "token_type" field.
func TokenTypeIsNil() predicate.Partner {
	return predicate.Partner(sql.FieldIsNull(FieldTokenType))
}

// TokenTypeNotNil applies the NotNil predicate on the "token_type" field.
func TokenTypeNotNil() predicate.Partner {
	return predicate.Partner(sql.FieldNotNull(FieldTokenType))
}

// TokenTypeEqualFold applies the EqualFold predicate on the "token_type" field.
func TokenTypeEqualFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldEqualFold(FieldTokenType, v))
}

// TokenTypeContainsFold applies the ContainsFold predicate on the "token_type" field.
func TokenTypeContainsFold(v string) predicate.Partner {
	return predicate.Partner(sql.FieldContainsFold(FieldTokenType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Partner {
	return predicate.Partner(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Partner {
	return predicate.Partner(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Partner {
	return predicate.Partner(sql.FieldNEQ(FieldDeleted, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Partner) predicate.Partner {
	return predicate.Partner(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Partner) predicate.Partner {
	return predicate.Partner(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Partner) predicate.Partner {
	return predicate.Partner(sql.NotPredicates(p))
}
