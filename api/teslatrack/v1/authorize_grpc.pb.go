// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: teslatrack/v1/authorize.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Authorize_CreateAuthorize_FullMethodName = "/api.teslatrack.v1.Authorize/CreateAuthorize"
	Authorize_Redirect_FullMethodName        = "/api.teslatrack.v1.Authorize/Redirect"
	Authorize_Callback_FullMethodName        = "/api.teslatrack.v1.Authorize/Callback"
)

// AuthorizeClient is the client API for Authorize service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Authorize service provides methods for managing the OAuth 2.0 authorization flow.
type AuthorizeClient interface {
	// CreateAuthorize creates a new OAuth 2.0 client configuration.
	// This is typically an administrative operation to register a new client.
	CreateAuthorize(ctx context.Context, in *CreateAuthorizeRequest, opts ...grpc.CallOption) (*CreateAuthorizeReply, error)
	// Redirect generates the authorization URL and redirects the user to the OAuth provider.
	Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectReply, error)
	// Callback is the endpoint that the OAuth provider calls after user authorization.
	// It receives the authorization code needed to exchange for an access token.
	Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackReply, error)
}

type authorizeClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizeClient(cc grpc.ClientConnInterface) AuthorizeClient {
	return &authorizeClient{cc}
}

func (c *authorizeClient) CreateAuthorize(ctx context.Context, in *CreateAuthorizeRequest, opts ...grpc.CallOption) (*CreateAuthorizeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAuthorizeReply)
	err := c.cc.Invoke(ctx, Authorize_CreateAuthorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeClient) Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedirectReply)
	err := c.cc.Invoke(ctx, Authorize_Redirect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeClient) Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallbackReply)
	err := c.cc.Invoke(ctx, Authorize_Callback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizeServer is the server API for Authorize service.
// All implementations must embed UnimplementedAuthorizeServer
// for forward compatibility.
//
// The Authorize service provides methods for managing the OAuth 2.0 authorization flow.
type AuthorizeServer interface {
	// CreateAuthorize creates a new OAuth 2.0 client configuration.
	// This is typically an administrative operation to register a new client.
	CreateAuthorize(context.Context, *CreateAuthorizeRequest) (*CreateAuthorizeReply, error)
	// Redirect generates the authorization URL and redirects the user to the OAuth provider.
	Redirect(context.Context, *RedirectRequest) (*RedirectReply, error)
	// Callback is the endpoint that the OAuth provider calls after user authorization.
	// It receives the authorization code needed to exchange for an access token.
	Callback(context.Context, *CallbackRequest) (*CallbackReply, error)
	mustEmbedUnimplementedAuthorizeServer()
}

// UnimplementedAuthorizeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorizeServer struct{}

func (UnimplementedAuthorizeServer) CreateAuthorize(context.Context, *CreateAuthorizeRequest) (*CreateAuthorizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthorize not implemented")
}
func (UnimplementedAuthorizeServer) Redirect(context.Context, *RedirectRequest) (*RedirectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redirect not implemented")
}
func (UnimplementedAuthorizeServer) Callback(context.Context, *CallbackRequest) (*CallbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedAuthorizeServer) mustEmbedUnimplementedAuthorizeServer() {}
func (UnimplementedAuthorizeServer) testEmbeddedByValue()                   {}

// UnsafeAuthorizeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizeServer will
// result in compilation errors.
type UnsafeAuthorizeServer interface {
	mustEmbedUnimplementedAuthorizeServer()
}

func RegisterAuthorizeServer(s grpc.ServiceRegistrar, srv AuthorizeServer) {
	// If the following call pancis, it indicates UnimplementedAuthorizeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Authorize_ServiceDesc, srv)
}

func _Authorize_CreateAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).CreateAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorize_CreateAuthorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).CreateAuthorize(ctx, req.(*CreateAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorize_Redirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).Redirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorize_Redirect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).Redirect(ctx, req.(*RedirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorize_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorize_Callback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServer).Callback(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorize_ServiceDesc is the grpc.ServiceDesc for Authorize service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorize_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.teslatrack.v1.Authorize",
	HandlerType: (*AuthorizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthorize",
			Handler:    _Authorize_CreateAuthorize_Handler,
		},
		{
			MethodName: "Redirect",
			Handler:    _Authorize_Redirect_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _Authorize_Callback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teslatrack/v1/authorize.proto",
}
