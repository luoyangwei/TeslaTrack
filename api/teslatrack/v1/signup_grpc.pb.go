// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: teslatrack/v1/signup.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Signup_CreateSignup_FullMethodName = "/api.teslatrack.v1.Signup/CreateSignup"
	Signup_VerifySignup_FullMethodName = "/api.teslatrack.v1.Signup/VerifySignup"
)

// SignupClient is the client API for Signup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Signup service definition.
type SignupClient interface {
	// Creates a new signup request.
	// Maps to HTTP POST /api/v1/signup/create
	CreateSignup(ctx context.Context, in *CreateSignupRequest, opts ...grpc.CallOption) (*CreateSignupReply, error)
	// Verifies if a signup account already exists.
	// Maps to HTTP GET /api/v1/signup/verify
	VerifySignup(ctx context.Context, in *VerifySignupRequest, opts ...grpc.CallOption) (*VerifySignupReply, error)
}

type signupClient struct {
	cc grpc.ClientConnInterface
}

func NewSignupClient(cc grpc.ClientConnInterface) SignupClient {
	return &signupClient{cc}
}

func (c *signupClient) CreateSignup(ctx context.Context, in *CreateSignupRequest, opts ...grpc.CallOption) (*CreateSignupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSignupReply)
	err := c.cc.Invoke(ctx, Signup_CreateSignup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupClient) VerifySignup(ctx context.Context, in *VerifySignupRequest, opts ...grpc.CallOption) (*VerifySignupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifySignupReply)
	err := c.cc.Invoke(ctx, Signup_VerifySignup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignupServer is the server API for Signup service.
// All implementations must embed UnimplementedSignupServer
// for forward compatibility.
//
// The Signup service definition.
type SignupServer interface {
	// Creates a new signup request.
	// Maps to HTTP POST /api/v1/signup/create
	CreateSignup(context.Context, *CreateSignupRequest) (*CreateSignupReply, error)
	// Verifies if a signup account already exists.
	// Maps to HTTP GET /api/v1/signup/verify
	VerifySignup(context.Context, *VerifySignupRequest) (*VerifySignupReply, error)
	mustEmbedUnimplementedSignupServer()
}

// UnimplementedSignupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignupServer struct{}

func (UnimplementedSignupServer) CreateSignup(context.Context, *CreateSignupRequest) (*CreateSignupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSignup not implemented")
}
func (UnimplementedSignupServer) VerifySignup(context.Context, *VerifySignupRequest) (*VerifySignupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignup not implemented")
}
func (UnimplementedSignupServer) mustEmbedUnimplementedSignupServer() {}
func (UnimplementedSignupServer) testEmbeddedByValue()                {}

// UnsafeSignupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignupServer will
// result in compilation errors.
type UnsafeSignupServer interface {
	mustEmbedUnimplementedSignupServer()
}

func RegisterSignupServer(s grpc.ServiceRegistrar, srv SignupServer) {
	// If the following call pancis, it indicates UnimplementedSignupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Signup_ServiceDesc, srv)
}

func _Signup_CreateSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignupServer).CreateSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signup_CreateSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignupServer).CreateSignup(ctx, req.(*CreateSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signup_VerifySignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignupServer).VerifySignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signup_VerifySignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignupServer).VerifySignup(ctx, req.(*VerifySignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Signup_ServiceDesc is the grpc.ServiceDesc for Signup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.teslatrack.v1.Signup",
	HandlerType: (*SignupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSignup",
			Handler:    _Signup_CreateSignup_Handler,
		},
		{
			MethodName: "VerifySignup",
			Handler:    _Signup_VerifySignup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teslatrack/v1/signup.proto",
}
