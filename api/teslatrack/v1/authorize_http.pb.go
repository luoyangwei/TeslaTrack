// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: teslatrack/v1/authorize.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthorizeCallback = "/api.teslatrack.v1.Authorize/Callback"
const OperationAuthorizeCreateAuthorize = "/api.teslatrack.v1.Authorize/CreateAuthorize"
const OperationAuthorizeRedirect = "/api.teslatrack.v1.Authorize/Redirect"

type AuthorizeHTTPServer interface {
	// Callback Callback is the endpoint that the OAuth provider calls after user authorization.
	// It receives the authorization code needed to exchange for an access token.
	Callback(context.Context, *CallbackRequest) (*CallbackReply, error)
	// CreateAuthorize CreateAuthorize creates a new OAuth 2.0 client configuration.
	// This is typically an administrative operation to register a new client.
	CreateAuthorize(context.Context, *CreateAuthorizeRequest) (*CreateAuthorizeReply, error)
	// Redirect Redirect generates the authorization URL and redirects the user to the OAuth provider.
	Redirect(context.Context, *RedirectRequest) (*RedirectReply, error)
}

func RegisterAuthorizeHTTPServer(s *http.Server, srv AuthorizeHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/authorize", _Authorize_CreateAuthorize0_HTTP_Handler(srv))
	r.POST("/api/v1/authorize/redirect", _Authorize_Redirect0_HTTP_Handler(srv))
	r.GET("/api/v1/authorize/callback", _Authorize_Callback0_HTTP_Handler(srv))
}

func _Authorize_CreateAuthorize0_HTTP_Handler(srv AuthorizeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAuthorizeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizeCreateAuthorize)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAuthorize(ctx, req.(*CreateAuthorizeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAuthorizeReply)
		return ctx.Result(200, reply)
	}
}

func _Authorize_Redirect0_HTTP_Handler(srv AuthorizeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RedirectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizeRedirect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Redirect(ctx, req.(*RedirectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RedirectReply)
		return ctx.Result(200, reply)
	}
}

func _Authorize_Callback0_HTTP_Handler(srv AuthorizeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CallbackRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizeCallback)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Callback(ctx, req.(*CallbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CallbackReply)
		return ctx.Result(200, reply)
	}
}

type AuthorizeHTTPClient interface {
	Callback(ctx context.Context, req *CallbackRequest, opts ...http.CallOption) (rsp *CallbackReply, err error)
	CreateAuthorize(ctx context.Context, req *CreateAuthorizeRequest, opts ...http.CallOption) (rsp *CreateAuthorizeReply, err error)
	Redirect(ctx context.Context, req *RedirectRequest, opts ...http.CallOption) (rsp *RedirectReply, err error)
}

type AuthorizeHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthorizeHTTPClient(client *http.Client) AuthorizeHTTPClient {
	return &AuthorizeHTTPClientImpl{client}
}

func (c *AuthorizeHTTPClientImpl) Callback(ctx context.Context, in *CallbackRequest, opts ...http.CallOption) (*CallbackReply, error) {
	var out CallbackReply
	pattern := "/api/v1/authorize/callback"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizeCallback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthorizeHTTPClientImpl) CreateAuthorize(ctx context.Context, in *CreateAuthorizeRequest, opts ...http.CallOption) (*CreateAuthorizeReply, error) {
	var out CreateAuthorizeReply
	pattern := "/api/v1/authorize"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizeCreateAuthorize))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthorizeHTTPClientImpl) Redirect(ctx context.Context, in *RedirectRequest, opts ...http.CallOption) (*RedirectReply, error) {
	var out RedirectReply
	pattern := "/api/v1/authorize/redirect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizeRedirect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
