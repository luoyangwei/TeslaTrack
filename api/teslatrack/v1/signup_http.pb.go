// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: teslatrack/v1/signup.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSignupCreateSignup = "/api.teslatrack.v1.Signup/CreateSignup"
const OperationSignupVerifySignup = "/api.teslatrack.v1.Signup/VerifySignup"

type SignupHTTPServer interface {
	// CreateSignup Creates a new signup request.
	// Maps to HTTP POST /api/v1/signup/create
	CreateSignup(context.Context, *CreateSignupRequest) (*CreateSignupReply, error)
	// VerifySignup Verifies if a signup account already exists.
	// Maps to HTTP GET /api/v1/signup/verify
	VerifySignup(context.Context, *VerifySignupRequest) (*VerifySignupReply, error)
}

func RegisterSignupHTTPServer(s *http.Server, srv SignupHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/signup/create", _Signup_CreateSignup0_HTTP_Handler(srv))
	r.GET("/api/v1/signup/verify", _Signup_VerifySignup0_HTTP_Handler(srv))
}

func _Signup_CreateSignup0_HTTP_Handler(srv SignupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSignupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSignupCreateSignup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSignup(ctx, req.(*CreateSignupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSignupReply)
		return ctx.Result(200, reply)
	}
}

func _Signup_VerifySignup0_HTTP_Handler(srv SignupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifySignupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSignupVerifySignup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifySignup(ctx, req.(*VerifySignupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifySignupReply)
		return ctx.Result(200, reply)
	}
}

type SignupHTTPClient interface {
	CreateSignup(ctx context.Context, req *CreateSignupRequest, opts ...http.CallOption) (rsp *CreateSignupReply, err error)
	VerifySignup(ctx context.Context, req *VerifySignupRequest, opts ...http.CallOption) (rsp *VerifySignupReply, err error)
}

type SignupHTTPClientImpl struct {
	cc *http.Client
}

func NewSignupHTTPClient(client *http.Client) SignupHTTPClient {
	return &SignupHTTPClientImpl{client}
}

func (c *SignupHTTPClientImpl) CreateSignup(ctx context.Context, in *CreateSignupRequest, opts ...http.CallOption) (*CreateSignupReply, error) {
	var out CreateSignupReply
	pattern := "/api/v1/signup/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSignupCreateSignup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SignupHTTPClientImpl) VerifySignup(ctx context.Context, in *VerifySignupRequest, opts ...http.CallOption) (*VerifySignupReply, error) {
	var out VerifySignupReply
	pattern := "/api/v1/signup/verify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSignupVerifySignup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
